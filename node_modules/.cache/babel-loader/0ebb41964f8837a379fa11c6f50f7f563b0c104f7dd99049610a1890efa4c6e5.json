{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      orders: [],\n      // Holds the list of all orders\n      form: {\n        orderID: null,\n        customerName: '',\n        totalAmount: '',\n        status: 'Pending'\n      },\n      isEditMode: false // Track whether we are editing or creating\n    };\n  },\n  methods: {\n    // Fetch all orders from the backend\n    async fetchOrders() {\n      try {\n        const response = await axios.get('http://localhost:5119/order/getAll');\n        this.orders = response.data;\n      } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n      }\n    },\n    // Submit a new order or update an existing one\n    async submitOrder() {\n      try {\n        if (this.isEditMode) {\n          await axios.post('http://localhost:5119/order/update', this.form);\n        } else {\n          await axios.post('http://localhost:5119/order/create', this.form);\n        }\n        this.fetchOrders(); // Refresh the orders list\n        this.resetForm(); // Reset the form\n      } catch (error) {\n        console.error(\"Error submitting order:\", error);\n      }\n    },\n    // Edit an existing order\n    async editOrder(orderID) {\n      try {\n        const response = await axios.get(`http://localhost:5119/order/read/${orderID}`);\n        this.form = {\n          ...response.data\n        }; // Populate the form with existing data\n        this.isEditMode = true;\n      } catch (error) {\n        console.error(\"Error reading order:\", error);\n      }\n    },\n    // Delete an order\n    async deleteOrder(orderID) {\n      try {\n        await axios.delete(`http://localhost:5119/order/delete/${orderID}`);\n        this.fetchOrders(); // Refresh the orders list after deletion\n      } catch (error) {\n        console.error(\"Error deleting order:\", error);\n      }\n    },\n    // Reset form after submission or canceling\n    resetForm() {\n      this.form = {\n        orderID: null,\n        customerName: '',\n        totalAmount: '',\n        status: 'Pending'\n      };\n      this.isEditMode = false;\n    }\n  },\n  mounted() {\n    // Fetch orders when the component is mounted\n    this.fetchOrders();\n  }\n};","map":{"version":3,"names":["axios","data","orders","form","orderID","customerName","totalAmount","status","isEditMode","methods","fetchOrders","response","get","error","console","submitOrder","post","resetForm","editOrder","deleteOrder","delete","mounted"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<!--&lt;!&ndash;src/views/adminviews/OrderManagement.vue&ndash;&gt;-->\r\n\r\n<!--<template>-->\r\n<!--  <div class=\"management-section\">-->\r\n<!--    <h3>Manage Orders</h3>-->\r\n<!--    <table>-->\r\n<!--      <thead>-->\r\n<!--      <tr>-->\r\n<!--        <th>Order ID</th>-->\r\n<!--&lt;!&ndash;        <th>Customer Name</th>&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <th>Shipping Address</th>&ndash;&gt;-->\r\n<!--        <th>Order Date</th>-->\r\n<!--        <th>Status</th>-->\r\n<!--        <th>Payment Method</th>-->\r\n<!--        <th>Shipped/Collected</th>-->\r\n<!--        <th>Total Amount</th>-->\r\n<!--        <th>CartID</th>-->\r\n<!--        <th>ShippingID</th>-->\r\n<!--        <th>Actions</th>-->\r\n<!--      </tr>-->\r\n<!--      </thead>-->\r\n<!--      <tbody>-->\r\n<!--      <tr v-for=\"order in filteredOrders\" :key=\"order.orderID\">-->\r\n<!--        <td>{{ order.orderID }}</td>-->\r\n<!--&lt;!&ndash;        <td>{{ order.cart.customerName }}</td>&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <td>{{ order.shipping.address }}</td>&ndash;&gt;-->\r\n<!--        <td>{{ order.orderDate }}</td>-->\r\n<!--        <td>{{ order.orderStatus }}</td>-->\r\n<!--        <td>{{ order.paymentMethod }}</td>-->\r\n<!--        <td>{{ order.shippedOrCollected ? 'Yes' : 'No' }}</td>-->\r\n<!--        <td>{{ order.totalAmount }}</td>-->\r\n<!--                <td>{{ order.cart.cartID }}</td>-->\r\n<!--        <td>{{ order.shipping.shippingID }}</td>-->\r\n<!--        <td><button @click=\"deleteOrder(order.orderID)\">Delete</button></td>-->\r\n<!--      </tr>-->\r\n<!--      </tbody>-->\r\n<!--    </table>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import { getOrders, deleteOrder, createOrder } from '@/services/orderService';-->\r\n\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      orders: [],-->\r\n<!--      filteredOrders: [],-->\r\n<!--      selectedOrder: null,-->\r\n<!--      newOrder: {-->\r\n<!--        orderID: '',-->\r\n<!--        orderDate: '',-->\r\n<!--        orderStatus: '',-->\r\n<!--        paymentMethod: '',-->\r\n<!--        shippedOrCollected: false,-->\r\n<!--        totalAmount: '',-->\r\n<!--        cart: {-->\r\n<!--          cartId: '',-->\r\n<!--          itemsQuantity: '',-->\r\n<!--          totalPrice:'',-->\r\n<!--          customer: {-->\r\n<!--            customerID: '',-->\r\n<!--            customerName: '',-->\r\n<!--            email: '',-->\r\n<!--            phone: ''-->\r\n<!--          }-->\r\n\r\n<!--        },-->\r\n<!--        shipping: {-->\r\n<!--          shippingID: '',-->\r\n<!--          deliveryAddress: '',-->\r\n<!--          orderStatus: '',-->\r\n<!--          shippingFee:''-->\r\n<!--        }-->\r\n<!--      },-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  async created() {-->\r\n<!--    await this.fetchOrders();-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    async fetchOrders() {-->\r\n<!--      try {-->\r\n<!--        this.orders = await getOrders();-->\r\n<!--        this.filteredOrders = this.orders;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error('Error fetching orders:', error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    async deleteOrder(orderID) {-->\r\n<!--      if (confirm('Are you sure you want to delete this order?')) {-->\r\n<!--        try {-->\r\n<!--          await deleteOrder(orderID);-->\r\n<!--          await this.fetchOrders();-->\r\n<!--        } catch (error) {-->\r\n<!--          console.error('Error deleting order:', error);-->\r\n<!--        }-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    openAddModal() {-->\r\n<!--      this.showAddModal = true;-->\r\n<!--    },-->\r\n<!--    closeAddModal() {-->\r\n<!--      this.showAddModal = false;-->\r\n<!--      this.newOrder = {-->\r\n<!--        orderID: '',-->\r\n<!--        orderDate: '',-->\r\n<!--        orderStatus: '',-->\r\n<!--        paymentMethod: '',-->\r\n<!--        shippedOrCollected: false,-->\r\n<!--        totalAmount: '',-->\r\n<!--        cartID: '',-->\r\n<!--        shippingID: ''-->\r\n<!--      };-->\r\n<!--    },-->\r\n<!--    async submitAdd() {-->\r\n<!--      try {-->\r\n<!--        await createOrder(this.newOrder);-->\r\n<!--        await this.fetchOrders();-->\r\n<!--        this.closeAddModal();-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error('Error adding order:', error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    openUpdateModal(order) {-->\r\n<!--      this.selectedOrder = { ...order };-->\r\n<!--      this.showUpdateModal = true;-->\r\n<!--    },-->\r\n<!--    closeUpdateModal() {-->\r\n<!--      this.showUpdateModal = false;-->\r\n<!--      this.selectedOrder = null;-->\r\n<!--    },-->\r\n<!--    // async submitUpdate() {-->\r\n<!--    //   try {-->\r\n<!--    //     await updateOrder(this.selectedOrder);-->\r\n<!--    //     await this.fetchOrders();-->\r\n<!--    //     this.closeUpdateModal();-->\r\n<!--    //   } catch (error) {-->\r\n<!--    //     console.error('Error updating order:', error);-->\r\n<!--    //   }-->\r\n<!--    // },-->\r\n<!--    searchOrders() {-->\r\n<!--      this.filteredOrders = this.orders.filter(order => {-->\r\n<!--        return order.orderID.toString().includes(this.searchQuery) ||-->\r\n<!--               order.orderStatus.toLowerCase().includes(this.searchQuery.toLowerCase());-->\r\n<!--      });-->\r\n<!--    },-->\r\n<!--    filterOrders() {-->\r\n<!--      if (this.filterKey) {-->\r\n<!--        this.filteredOrders = this.orders.filter(order => {-->\r\n<!--          return order[this.filterKey].toString().toLowerCase().includes(this.searchQuery.toLowerCase());-->\r\n<!--        });-->\r\n<!--      } else {-->\r\n<!--        this.filteredOrders = this.orders;-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--.management-section {-->\r\n<!--  background-color: #fff;-->\r\n<!--  padding: 20px;-->\r\n<!--  margin-bottom: 20px;-->\r\n<!--  border-radius: 8px;-->\r\n<!--}-->\r\n\r\n<!--table {-->\r\n<!--  width: 100%;-->\r\n<!--  border-collapse: collapse;-->\r\n<!--}-->\r\n\r\n<!--th, td {-->\r\n<!--  text-align: left;-->\r\n<!--  padding: 10px;-->\r\n<!--  border-bottom: 1px solid #ddd;-->\r\n<!--}-->\r\n\r\n<!--button {-->\r\n<!--  padding: 5px 10px;-->\r\n<!--  background-color: #3498db;-->\r\n<!--  color: #fff;-->\r\n<!--  border: none;-->\r\n<!--  border-radius: 4px;-->\r\n<!--  cursor: pointer;-->\r\n<!--}-->\r\n\r\n<!--button:hover {-->\r\n<!--  background-color: #2980b9;-->\r\n<!--}-->\r\n<!--</style>-->\r\n\r\n<template>\r\n  <div>\r\n    <h1>Order Management</h1>\r\n    <!-- Order Table -->\r\n    <table class=\"table\">\r\n      <thead>\r\n      <tr>\r\n        <th>Order ID</th>\r\n        <th>Customer Name</th>\r\n        <th>Order Date</th>\r\n        <th>Total Amount</th>\r\n        <th>Status</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"order in orders\" :key=\"order.orderID\">\r\n        <td>{{ order.orderID }}</td>\r\n        <td>{{ order.customerName }}</td>\r\n        <td>{{ order.orderDate }}</td>\r\n        <td>{{ order.totalAmount }}</td>\r\n        <td>{{ order.status }}</td>\r\n        <td>\r\n          <button @click=\"editOrder(order.orderID)\">Edit</button>\r\n          <button @click=\"deleteOrder(order.orderID)\">Delete</button>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Form for Creating/Updating Orders -->\r\n    <div>\r\n      <h2>{{ isEditMode ? 'Edit Order' : 'Create Order' }}</h2>\r\n      <form @submit.prevent=\"submitOrder\">\r\n        <!-- Form fields for order properties -->\r\n        <input v-model=\"form.customerName\" placeholder=\"Customer Name\" />\r\n        <input v-model=\"form.totalAmount\" placeholder=\"Total Amount\" />\r\n        <select v-model=\"form.status\">\r\n          <option>Pending</option>\r\n          <option>Shipped</option>\r\n          <option>Delivered</option>\r\n        </select>\r\n        <button type=\"submit\">{{ isEditMode ? 'Update' : 'Create' }}</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [],       // Holds the list of all orders\r\n      form: {\r\n        orderID: null,\r\n        customerName: '',\r\n        totalAmount: '',\r\n        status: 'Pending'\r\n      },\r\n      isEditMode: false, // Track whether we are editing or creating\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch all orders from the backend\r\n    async fetchOrders() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5119/order/getAll');\r\n        this.orders = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching orders:\", error);\r\n      }\r\n    },\r\n\r\n    // Submit a new order or update an existing one\r\n    async submitOrder() {\r\n      try {\r\n        if (this.isEditMode) {\r\n          await axios.post('http://localhost:5119/order/update', this.form);\r\n        } else {\r\n          await axios.post('http://localhost:5119/order/create', this.form);\r\n        }\r\n        this.fetchOrders();  // Refresh the orders list\r\n        this.resetForm();    // Reset the form\r\n      } catch (error) {\r\n        console.error(\"Error submitting order:\", error);\r\n      }\r\n    },\r\n\r\n    // Edit an existing order\r\n    async editOrder(orderID) {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5119/order/read/${orderID}`);\r\n        this.form = { ...response.data }; // Populate the form with existing data\r\n        this.isEditMode = true;\r\n      } catch (error) {\r\n        console.error(\"Error reading order:\", error);\r\n      }\r\n    },\r\n\r\n    // Delete an order\r\n    async deleteOrder(orderID) {\r\n      try {\r\n        await axios.delete(`http://localhost:5119/order/delete/${orderID}`);\r\n        this.fetchOrders();  // Refresh the orders list after deletion\r\n      } catch (error) {\r\n        console.error(\"Error deleting order:\", error);\r\n      }\r\n    },\r\n\r\n    // Reset form after submission or canceling\r\n    resetForm() {\r\n      this.form = {\r\n        orderID: null,\r\n        customerName: '',\r\n        totalAmount: '',\r\n        status: 'Pending',\r\n      };\r\n      this.isEditMode = false;\r\n    }\r\n  },\r\n  mounted() {\r\n    // Fetch orders when the component is mounted\r\n    this.fetchOrders();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add styling for table and form here */\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n.table th, .table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n}\r\n.table th {\r\n  background-color: #f4f4f4;\r\n}\r\n</style>\r\n"],"mappings":"AAkPA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MAAQ;MAClBC,IAAI,EAAE;QACJC,OAAO,EAAE,IAAI;QACbC,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,MAAM,EAAE;MACV,CAAC;MACDC,UAAU,EAAE,KAAK,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,oCAAoC,CAAC;QACtE,IAAI,CAACV,MAAK,GAAIS,QAAQ,CAACV,IAAI;MAC7B,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAED;IACA,MAAME,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,IAAI,CAACP,UAAU,EAAE;UACnB,MAAMR,KAAK,CAACgB,IAAI,CAAC,oCAAoC,EAAE,IAAI,CAACb,IAAI,CAAC;QACnE,OAAO;UACL,MAAMH,KAAK,CAACgB,IAAI,CAAC,oCAAoC,EAAE,IAAI,CAACb,IAAI,CAAC;QACnE;QACA,IAAI,CAACO,WAAW,CAAC,CAAC,EAAG;QACrB,IAAI,CAACO,SAAS,CAAC,CAAC,EAAK;MACvB,EAAE,OAAOJ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED;IACA,MAAMK,SAASA,CAACd,OAAO,EAAE;MACvB,IAAI;QACF,MAAMO,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,oCAAoCR,OAAO,EAAE,CAAC;QAC/E,IAAI,CAACD,IAAG,GAAI;UAAE,GAAGQ,QAAQ,CAACV;QAAK,CAAC,EAAE;QAClC,IAAI,CAACO,UAAS,GAAI,IAAI;MACxB,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED;IACA,MAAMM,WAAWA,CAACf,OAAO,EAAE;MACzB,IAAI;QACF,MAAMJ,KAAK,CAACoB,MAAM,CAAC,sCAAsChB,OAAO,EAAE,CAAC;QACnE,IAAI,CAACM,WAAW,CAAC,CAAC,EAAG;MACvB,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAED;IACAI,SAASA,CAAA,EAAG;MACV,IAAI,CAACd,IAAG,GAAI;QACVC,OAAO,EAAE,IAAI;QACbC,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE,EAAE;QACfC,MAAM,EAAE;MACV,CAAC;MACD,IAAI,CAACC,UAAS,GAAI,KAAK;IACzB;EACF,CAAC;EACDa,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACX,WAAW,CAAC,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}