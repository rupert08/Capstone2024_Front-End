{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-95d81cca\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Order Management\", -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"table\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Order ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Customer Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Order Date\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Total Amount\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Actions\")])], -1 /* HOISTED */));\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", null, \"Pending\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", null, \"Shipped\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", null, \"Delivered\", -1 /* HOISTED */));\nconst _hoisted_9 = [_hoisted_6, _hoisted_7, _hoisted_8];\nconst _hoisted_10 = {\n  type: \"submit\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createCommentVNode(\" Order Table \"), _createElementVNode(\"table\", _hoisted_2, [_hoisted_3, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.orders, order => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: order.orderID\n    }, [_createElementVNode(\"td\", null, _toDisplayString(order.orderID), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.customerName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.orderDate), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.totalAmount), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.status), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.editOrder(order.orderID)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_4), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteOrder(order.orderID)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_5)])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Form for Creating/Updating Orders \"), _createElementVNode(\"div\", null, [_createElementVNode(\"h2\", null, _toDisplayString($data.isEditMode ? 'Edit Order' : 'Create Order'), 1 /* TEXT */), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitOrder && $options.submitOrder(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" Form fields for order properties \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form.customerName = $event),\n    placeholder: \"Customer Name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.form.customerName]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.form.totalAmount = $event),\n    placeholder: \"Total Amount\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.form.totalAmount]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.form.status = $event)\n  }, [..._hoisted_9], 512 /* NEED_PATCH */), [[_vModelSelect, $data.form.status]]), _createElementVNode(\"button\", _hoisted_10, _toDisplayString($data.isEditMode ? 'Update' : 'Create'), 1 /* TEXT */)], 32 /* NEED_HYDRATION */)])]);\n}","map":{"version":3,"names":["_createElementVNode","class","_hoisted_6","_hoisted_7","_hoisted_8","type","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","orders","order","key","orderID","_toDisplayString","customerName","orderDate","totalAmount","status","onClick","$event","$options","editOrder","_hoisted_4","deleteOrder","_hoisted_5","isEditMode","onSubmit","_cache","_withModifiers","args","submitOrder","form","placeholder","_hoisted_9","_hoisted_10"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<!--src/views/adminviews/OrderManagement.vue-->\r\n\r\n<!--<template>-->\r\n<!--  <div class=\"management-section\">-->\r\n<!--    <h3>Manage Orders</h3>-->\r\n<!--    <table>-->\r\n<!--      <thead>-->\r\n<!--      <tr>-->\r\n<!--        <th>Order ID</th>-->\r\n<!--&lt;!&ndash;        <th>Customer Name</th>&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <th>Shipping Address</th>&ndash;&gt;-->\r\n<!--        <th>Order Date</th>-->\r\n<!--        <th>Status</th>-->\r\n<!--        <th>Payment Method</th>-->\r\n<!--        <th>Shipped/Collected</th>-->\r\n<!--        <th>Total Amount</th>-->\r\n<!--        <th>CartID</th>-->\r\n<!--        <th>ShippingID</th>-->\r\n<!--        <th>Actions</th>-->\r\n<!--      </tr>-->\r\n<!--      </thead>-->\r\n<!--      <tbody>-->\r\n<!--     <tr v-for=\"order in filteredOrders\" :key=\"order.orderID\">-->\r\n<!--       <td>{{ order.orderID }}</td>-->\r\n<!--       <td>{{ order.orderDate ?? 'N/A' }}</td>-->\r\n<!--       <td>{{ order.shipping?.orderStatus.orderStatus    }}</td>-->\r\n<!--       <td>{{ order.paymentMethod?.method.paymentMethod ?? 'N/A'}}</td>-->\r\n<!--       <td>{{ order.shippedOrCollected ? 'Yes' : 'No' }}</td>-->\r\n<!--  <td>{{ order.totalAmount }}</td>-->\r\n<!--  <td>{{ order.cart?.cartId }}</td>-->\r\n<!--  <td>{{ order.shipping?.shippingID }}</td>-->\r\n<!--  <td><button @click=\"deleteOrder(order.orderID)\">Delete</button></td>-->\r\n<!--</tr>-->\r\n<!--      </tbody>-->\r\n<!--    </table>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import { getOrders, deleteOrder, createOrder } from '@/services/orderService';-->\r\n\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      orders: [],-->\r\n<!--      filteredOrders: [],-->\r\n<!--      selectedOrder: null,-->\r\n<!--      newOrder: {-->\r\n<!--        orderID: '',-->\r\n<!--        orderDate: '',-->\r\n<!--        orderStatus:{-->\r\n<!--          0: \"PENDING\",-->\r\n<!--          1: \"SHIPPED\",-->\r\n<!--          2: \"DELIVERED\",-->\r\n<!--          3: \"CANCELLED\"-->\r\n<!--        } ,-->\r\n<!--        paymentMethod: {-->\r\n<!--          0: \"CREDIT_CARD\",-->\r\n<!--          1: \"DEBIT_CARD\",-->\r\n<!--          2: \"PAYPAL\",-->\r\n<!--          3: \"CASH_ON_DELIVERY\"-->\r\n<!--        },-->\r\n<!--        shippedOrCollected: false,-->\r\n<!--        totalAmount: '',-->\r\n<!--        cart: {-->\r\n<!--          cartId: '',-->\r\n<!--          itemsQuantity: '',-->\r\n<!--          totalPrice:'',-->\r\n<!--          customer: {-->\r\n<!--            customerID: '',-->\r\n<!--            customerName: '',-->\r\n<!--            contact: {-->\r\n<!--              email: '',-->\r\n<!--              phone: ''-->\r\n<!--            }-->\r\n<!--          }-->\r\n\r\n<!--        },-->\r\n<!--        shipping: {-->\r\n<!--          shippingID: '',-->\r\n<!--          deliveryAddress: '',-->\r\n<!--          orderStatus: '',-->\r\n<!--          shippingFee:''-->\r\n<!--        }-->\r\n<!--      },-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  async created() {-->\r\n<!--    await this.fetchOrders();-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    async fetchOrders() {-->\r\n<!--      try {-->\r\n<!--        this.orders = await getOrders();-->\r\n<!--        this.filteredOrders = this.orders;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error('Error fetching orders:', error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    async deleteOrder(orderID) {-->\r\n<!--      if (confirm('Are you sure you want to delete this order?')) {-->\r\n<!--        try {-->\r\n<!--          await deleteOrder(orderID);-->\r\n<!--          await this.fetchOrders();-->\r\n<!--        } catch (error) {-->\r\n<!--          console.error('Error deleting order:', error);-->\r\n<!--        }-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    openAddModal() {-->\r\n<!--      this.showAddModal = true;-->\r\n<!--    },-->\r\n<!--    closeAddModal() {-->\r\n<!--      this.showAddModal = false;-->\r\n<!--      this.newOrder = {-->\r\n<!--        orderID: '',-->\r\n<!--        orderDate: '',-->\r\n<!--        orderStatus: '',-->\r\n<!--        paymentMethod: '',-->\r\n<!--        shippedOrCollected: false,-->\r\n<!--        totalAmount: '',-->\r\n<!--        cartID: '',-->\r\n<!--        shippingID: ''-->\r\n<!--      };-->\r\n<!--    },-->\r\n<!--    async submitAdd() {-->\r\n<!--      try {-->\r\n<!--        await createOrder(this.newOrder);-->\r\n<!--        await this.fetchOrders();-->\r\n<!--        this.closeAddModal();-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error('Error adding order:', error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    openUpdateModal(order) {-->\r\n<!--      this.selectedOrder = { ...order };-->\r\n<!--      this.showUpdateModal = true;-->\r\n<!--    },-->\r\n<!--    closeUpdateModal() {-->\r\n<!--      this.showUpdateModal = false;-->\r\n<!--      this.selectedOrder = null;-->\r\n<!--    },-->\r\n<!--    // async submitUpdate() {-->\r\n<!--    //   try {-->\r\n<!--    //     await updateOrder(this.selectedOrder);-->\r\n<!--    //     await this.fetchOrders();-->\r\n<!--    //     this.closeUpdateModal();-->\r\n<!--    //   } catch (error) {-->\r\n<!--    //     console.error('Error updating order:', error);-->\r\n<!--    //   }-->\r\n<!--    // },-->\r\n<!--    searchOrders() {-->\r\n<!--      this.filteredOrders = this.orders.filter(order => {-->\r\n<!--        return order.orderID.toString().includes(this.searchQuery) ||-->\r\n<!--               order.orderStatus.toLowerCase().includes(this.searchQuery.toLowerCase());-->\r\n<!--      });-->\r\n<!--    },-->\r\n<!--    filterOrders() {-->\r\n<!--      if (this.filterKey) {-->\r\n<!--        this.filteredOrders = this.orders.filter(order => {-->\r\n<!--          return order[this.filterKey].toString().toLowerCase().includes(this.searchQuery.toLowerCase());-->\r\n<!--        });-->\r\n<!--      } else {-->\r\n<!--        this.filteredOrders = this.orders;-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--.management-section {-->\r\n<!--  background-color: #fff;-->\r\n<!--  padding: 20px;-->\r\n<!--  margin-bottom: 20px;-->\r\n<!--  border-radius: 8px;-->\r\n<!--}-->\r\n\r\n<!--table {-->\r\n<!--  width: 100%;-->\r\n<!--  border-collapse: collapse;-->\r\n<!--}-->\r\n\r\n<!--th, td {-->\r\n<!--  text-align: left;-->\r\n<!--  padding: 10px;-->\r\n<!--  border-bottom: 1px solid #ddd;-->\r\n<!--}-->\r\n\r\n<!--button {-->\r\n<!--  padding: 5px 10px;-->\r\n<!--  background-color: #3498db;-->\r\n<!--  color: #fff;-->\r\n<!--  border: none;-->\r\n<!--  border-radius: 4px;-->\r\n<!--  cursor: pointer;-->\r\n<!--}-->\r\n\r\n<!--button:hover {-->\r\n<!--  background-color: #2980b9;-->\r\n<!--}-->\r\n<!--</style>-->\r\n\r\n\r\n<template>\r\n  <div>\r\n    <h1>Order Management</h1>\r\n    <!-- Order Table -->\r\n    <table class=\"table\">\r\n      <thead>\r\n      <tr>\r\n        <th>Order ID</th>\r\n        <th>Customer Name</th>\r\n        <th>Order Date</th>\r\n        <th>Total Amount</th>\r\n        <th>Status</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"order in orders\" :key=\"order.orderID\">\r\n        <td>{{ order.orderID }}</td>\r\n        <td>{{ order.customerName }}</td>\r\n        <td>{{ order.orderDate }}</td>\r\n        <td>{{ order.totalAmount }}</td>\r\n        <td>{{ order.status }}</td>\r\n        <td>\r\n          <button @click=\"editOrder(order.orderID)\">Edit</button>\r\n          <button @click=\"deleteOrder(order.orderID)\">Delete</button>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Form for Creating/Updating Orders -->\r\n    <div>\r\n      <h2>{{ isEditMode ? 'Edit Order' : 'Create Order' }}</h2>\r\n      <form @submit.prevent=\"submitOrder\">\r\n        <!-- Form fields for order properties -->\r\n        <input v-model=\"form.customerName\" placeholder=\"Customer Name\" />\r\n        <input v-model=\"form.totalAmount\" placeholder=\"Total Amount\" />\r\n        <select v-model=\"form.status\">\r\n          <option>Pending</option>\r\n          <option>Shipped</option>\r\n          <option>Delivered</option>\r\n        </select>\r\n        <button type=\"submit\">{{ isEditMode ? 'Update' : 'Create' }}</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [],       // Holds the list of all orders\r\n      form: {\r\n        orderID: null,\r\n        customerName: '',\r\n        totalAmount: '',\r\n        status: 'Pending'\r\n      },\r\n      isEditMode: false, // Track whether we are editing or creating\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch all orders from the backend\r\n    async fetchOrders() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5119/order/getAll');\r\n        this.orders = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching orders:\", error);\r\n      }\r\n    },\r\n\r\n    // Submit a new order or update an existing one\r\n    async submitOrder() {\r\n      try {\r\n        if (this.isEditMode) {\r\n          await axios.post('http://localhost:5119/order/update', this.form);\r\n        } else {\r\n          await axios.post('http://localhost:5119/order/create', this.form);\r\n        }\r\n        this.fetchOrders();  // Refresh the orders list\r\n        this.resetForm();    // Reset the form\r\n      } catch (error) {\r\n        console.error(\"Error submitting order:\", error);\r\n      }\r\n    },\r\n\r\n    // Edit an existing order\r\n    async editOrder(orderID) {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5119/order/read/${orderID}`);\r\n        this.form = { ...response.data }; // Populate the form with existing data\r\n        this.isEditMode = true;\r\n      } catch (error) {\r\n        console.error(\"Error reading order:\", error);\r\n      }\r\n    },\r\n\r\n    // Delete an order\r\n    async deleteOrder(orderID) {\r\n      try {\r\n        await axios.delete(`http://localhost:5119/order/delete/${orderID}`);\r\n        this.fetchOrders();  // Refresh the orders list after deletion\r\n      } catch (error) {\r\n        console.error(\"Error deleting order:\", error);\r\n      }\r\n    },\r\n\r\n    // Reset form after submission or canceling\r\n    resetForm() {\r\n      this.form = {\r\n        orderID: null,\r\n        customerName: '',\r\n        totalAmount: '',\r\n        status: 'Pending',\r\n      };\r\n      this.isEditMode = false;\r\n    }\r\n  },\r\n  mounted() {\r\n    // Fetch orders when the component is mounted\r\n    this.fetchOrders();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add styling for table and form here */\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n.table th, .table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n}\r\n.table th {\r\n  background-color: #f4f4f4;\r\n}\r\n</style>\r\n"],"mappings":";;gEA8MIA,mBAAA,CAAyB,YAArB,kBAAgB;;EAEbC,KAAK,EAAC;AAAO;gEAClBD,mBAAA,CASQ,gB,aARRA,mBAAA,CAOK,a,aANHA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAsB,YAAlB,eAAa,G,aACjBA,mBAAA,CAAmB,YAAf,YAAU,G,aACdA,mBAAA,CAAqB,YAAjB,cAAY,G,aAChBA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAgB,YAAZ,SAAO,E;mBAxNnB;mBAAA;gEAkPUA,mBAAA,CAAwB,gBAAhB,SAAO;gEACfA,mBAAA,CAAwB,gBAAhB,SAAO;gEACfA,mBAAA,CAA0B,gBAAlB,WAAS;oBAFjBE,UAAwB,EACxBC,UAAwB,EACxBC,UAA0B,C;;EAEpBC,IAAI,EAAC;AAAQ;;uBAzC3BC,mBAAA,CA4CM,cA3CJC,UAAyB,EACzBC,mBAAA,iBAAoB,EACpBR,mBAAA,CAwBQ,SAxBRS,UAwBQ,GAvBNC,UASQ,EACRV,mBAAA,CAYQ,iB,kBAXRM,mBAAA,CAUKK,SAAA,QAtOXC,WAAA,CA4N0BC,KAAA,CAAAC,MAAM,EAAfC,KAAK;yBAAhBT,mBAAA,CAUK;MAVwBU,GAAG,EAAED,KAAK,CAACE;QACtCjB,mBAAA,CAA4B,YAAAkB,gBAAA,CAArBH,KAAK,CAACE,OAAO,kBACpBjB,mBAAA,CAAiC,YAAAkB,gBAAA,CAA1BH,KAAK,CAACI,YAAY,kBACzBnB,mBAAA,CAA8B,YAAAkB,gBAAA,CAAvBH,KAAK,CAACK,SAAS,kBACtBpB,mBAAA,CAAgC,YAAAkB,gBAAA,CAAzBH,KAAK,CAACM,WAAW,kBACxBrB,mBAAA,CAA2B,YAAAkB,gBAAA,CAApBH,KAAK,CAACO,MAAM,kBACnBtB,mBAAA,CAGK,aAFHA,mBAAA,CAAuD;MAA9CuB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,SAAS,CAACX,KAAK,CAACE,OAAO;OAAG,MAAI,iBAnOxDU,UAAA,GAoOU3B,mBAAA,CAA2D;MAAlDuB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAG,WAAW,CAACb,KAAK,CAACE,OAAO;OAAG,QAAM,iBApO5DY,UAAA,E;sCA0OIrB,mBAAA,uCAA0C,EAC1CR,mBAAA,CAaM,cAZJA,mBAAA,CAAyD,YAAAkB,gBAAA,CAAlDL,KAAA,CAAAiB,UAAU,kDACjB9B,mBAAA,CAUO;IAVA+B,QAAM,EAAAC,MAAA,QAAAA,MAAA,MA7OnBC,cAAA,KAAAC,IAAA,KA6O6BT,QAAA,CAAAU,WAAA,IAAAV,QAAA,CAAAU,WAAA,IAAAD,IAAA,CAAW;MAChC1B,mBAAA,sCAAyC,E,gBACzCR,mBAAA,CAAiE;IA/OzE,uBAAAgC,MAAA,QAAAA,MAAA,MAAAR,MAAA,IA+OwBX,KAAA,CAAAuB,IAAI,CAACjB,YAAY,GAAAK,MAAA;IAAEa,WAAW,EAAC;iDAA/BxB,KAAA,CAAAuB,IAAI,CAACjB,YAAY,E,mBACjCnB,mBAAA,CAA+D;IAhPvE,uBAAAgC,MAAA,QAAAA,MAAA,MAAAR,MAAA,IAgPwBX,KAAA,CAAAuB,IAAI,CAACf,WAAW,GAAAG,MAAA;IAAEa,WAAW,EAAC;iDAA9BxB,KAAA,CAAAuB,IAAI,CAACf,WAAW,E,mBAChCrB,mBAAA,CAIS;IArPjB,uBAAAgC,MAAA,QAAAA,MAAA,MAAAR,MAAA,IAiPyBX,KAAA,CAAAuB,IAAI,CAACd,MAAM,GAAAE,MAAA;KAjPpC,IAAAc,UAAA,2B,gBAiPyBzB,KAAA,CAAAuB,IAAI,CAACd,MAAM,E,GAK5BtB,mBAAA,CAAqE,UAArEuC,WAAqE,EAAArB,gBAAA,CAA5CL,KAAA,CAAAiB,UAAU,uC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}