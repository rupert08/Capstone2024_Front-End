{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-158c5606\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"management-section\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Manage Customers\", -1));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \"Actions\", -1));\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AddCustomerModal = _resolveComponent(\"AddCustomerModal\");\n  const _component_UpdateCustomerModal = _resolveComponent(\"UpdateCustomerModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openAddModal && $options.openAddModal(...args))\n  }, \"Add Customer\"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.searchQuery = $event),\n    placeholder: \"Search customers...\"\n  }, null, 512), [[_vModelText, $data.searchQuery]]), _createElementVNode(\"table\", null, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.sortBy('id'))\n  }, \"ID\"), _createElementVNode(\"th\", {\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.sortBy('firstName'))\n  }, \"First Name\"), _createElementVNode(\"th\", {\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.sortBy('lastName'))\n  }, \"Last Name\"), _createElementVNode(\"th\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.sortBy('email'))\n  }, \"Email\"), _createElementVNode(\"th\", {\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.sortBy('phone'))\n  }, \"Phone\"), _hoisted_3])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredCustomers, customer => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: customer.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(customer.userId), 1), _createElementVNode(\"td\", null, _toDisplayString(customer.firstName), 1), _createElementVNode(\"td\", null, _toDisplayString(customer.lastName), 1), _createElementVNode(\"td\", null, _toDisplayString(customer.contact.email), 1), _createElementVNode(\"td\", null, _toDisplayString(customer.contact.phoneNumber), 1), _createElementVNode(\"button\", {\n      onClick: $event => $options.openUpdateModal(customer)\n    }, \"Update\", 8, _hoisted_4), _createElementVNode(\"button\", {\n      onClick: $event => $options.removeCustomer(customer.userId)\n    }, \"Delete\", 8, _hoisted_5)]);\n  }), 128))])]), _createVNode(_component_AddCustomerModal, {\n    isVisible: $data.isAddModalVisible,\n    onClose: $options.closeAddModal,\n    onAdd: $options.addCustomer\n  }, null, 8, [\"isVisible\", \"onClose\", \"onAdd\"]), _createVNode(_component_UpdateCustomerModal, {\n    isVisible: $data.isUpdateModalVisible,\n    customer: $data.selectedCustomer,\n    onClose: $options.closeUpdateModal,\n    onUpdateCustomer: $options.updateCustomer\n  }, null, 8, [\"isVisible\", \"customer\", \"onClose\", \"onUpdateCustomer\"])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","openAddModal","type","$event","$data","searchQuery","placeholder","_ctx","sortBy","_hoisted_3","_Fragment","_renderList","filteredCustomers","customer","key","id","_toDisplayString","userId","firstName","lastName","contact","email","phoneNumber","openUpdateModal","_hoisted_4","removeCustomer","_hoisted_5","_createVNode","_component_AddCustomerModal","isVisible","isAddModalVisible","onClose","closeAddModal","onAdd","addCustomer","_component_UpdateCustomerModal","isUpdateModalVisible","selectedCustomer","closeUpdateModal","onUpdateCustomer","updateCustomer"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\CustomerManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"management-section\">\r\n    <h3>Manage Customers</h3>\r\n    <button @click=\"openAddModal\">Add Customer</button>\r\n    <input type=\"text\" v-model=\"searchQuery\" placeholder=\"Search customers...\" />\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortBy('id')\">ID</th>\r\n          <th @click=\"sortBy('firstName')\">First Name</th>\r\n          <th @click=\"sortBy('lastName')\">Last Name</th>\r\n          <th @click=\"sortBy('email')\">Email</th>\r\n          <th @click=\"sortBy('phone')\">Phone</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"customer in filteredCustomers\" :key=\"customer.id\">\r\n          <td>{{ customer.userId }}</td>\r\n          <td>{{ customer.firstName }}</td>\r\n          <td>{{ customer.lastName }}</td>\r\n          <td>{{ customer.contact.email }}</td>\r\n          <td>{{ customer.contact.phoneNumber }}</td>\r\n          <button @click=\"openUpdateModal(customer)\">Update</button>\r\n          <button @click=\"removeCustomer(customer.userId)\">Delete</button>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <!-- Modals -->\r\n    <AddCustomerModal\r\n      :isVisible=\"isAddModalVisible\"\r\n      @close=\"closeAddModal\"\r\n      @add=\"addCustomer\"\r\n    />\r\n    <UpdateCustomerModal\r\n      :isVisible=\"isUpdateModalVisible\"\r\n      :customer=\"selectedCustomer\"\r\n      @close=\"closeUpdateModal\"\r\n      @update-customer=\"updateCustomer\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AddCustomerModal from '@/modals/AddCustomerModal.vue';\r\nimport UpdateCustomerModal from '@/modals/UpdateCustomerModal.vue';\r\nimport { getCustomers, deleteCustomer, updateCustomer, createCustomer } from '@/services/customerService';\r\n\r\nexport default {\r\n  components: {\r\n    AddCustomerModal,\r\n    UpdateCustomerModal\r\n  },\r\n  data() {\r\n    return {\r\n      customers: [],\r\n      sortKey: '',\r\n      sortAsc: true,\r\n      isAddModalVisible: false,\r\n      isUpdateModalVisible: false,\r\n      selectedCustomer: null,\r\n      searchQuery: ''\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchCustomers(); // Fetch the customers when the component is created\r\n  },\r\n  computed: {\r\n    filteredCustomers() {\r\n      return this.customers.filter(customer => {\r\n        const query = this.searchQuery.toLowerCase();\r\n        return (\r\n          customer.firstName.toLowerCase().includes(query) ||\r\n          customer.lastName.toLowerCase().includes(query) ||\r\n          (customer.contact && customer.contact.email.toLowerCase().includes(query)) ||\r\n          (customer.contact && customer.contact.phoneNumber.includes(query))\r\n        );\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchCustomers() {\r\n      try {\r\n        this.customers = await getCustomers();\r\n      } catch (error) {\r\n        console.error('Error fetching customers:', error);\r\n      }\r\n    },\r\n    openAddModal() {\r\n      this.isAddModalVisible = true;\r\n    },\r\n    closeAddModal() {\r\n      this.isAddModalVisible = false;\r\n    },\r\n    openUpdateModal(customer) {\r\n      this.selectedCustomer = customer;\r\n      this.isUpdateModalVisible = true;\r\n    },\r\n    closeUpdateModal() {\r\n      this.isUpdateModalVisible = false;\r\n    },\r\n    async addCustomer(newCustomer) {\r\n      try {\r\n        await createCustomer(newCustomer);\r\n        await this.fetchCustomers(); // Refresh the customer list after addition\r\n        this.closeAddModal();\r\n      } catch (error) {\r\n        console.error('Error adding customer:', error);\r\n      }\r\n    },\r\n    async updateCustomer(customerId, updatedCustomer) {\r\n      if (!customerId || customerId === 'undefined') {\r\n        console.error('Invalid Customer ID');\r\n        return;\r\n      }\r\n      try {\r\n        await updateCustomer(customerId, updatedCustomer);\r\n        this.fetchCustomers(); // Refresh the customer list after update\r\n      } catch (error) {\r\n        console.error('Error updating customer:', error);\r\n      }\r\n    },\r\n    async removeCustomer(customerId) {\r\n      if (confirm('Are you sure you want to delete this customer?')) {\r\n        try {\r\n          await deleteCustomer(customerId);\r\n          this.fetchCustomers(); // Refresh the customer list after deletion\r\n        } catch (error) {\r\n          console.error('Error deleting customer:', error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.management-section {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  border-radius: 8px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAoB;gEAC7BC,mBAAA,CAAyB,YAArB,kBAAgB;gEAWdA,mBAAA,CAAgB,YAAZ,SAAO;mBAbrB;mBAAA;;;;uBACEC,mBAAA,CAuCM,OAvCNC,UAuCM,GAtCJC,UAAyB,EACzBH,mBAAA,CAAmD;IAA1CI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;KAAE,cAAY,G,gBAC1CN,mBAAA,CAA6E;IAAtES,IAAI,EAAC,MAAM;IAJtB,uBAAAJ,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAIgCC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAEG,WAAW,EAAC;gCAAzBF,KAAA,CAAAC,WAAW,E,GACvCZ,mBAAA,CAsBQ,gBArBNA,mBAAA,CASQ,gBARNA,mBAAA,CAOK,aANHA,mBAAA,CAAiC;IAA5BI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEI,IAAA,CAAAC,MAAM;KAAQ,IAAE,GAC5Bf,mBAAA,CAAgD;IAA3CI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEI,IAAA,CAAAC,MAAM;KAAe,YAAU,GAC3Cf,mBAAA,CAA8C;IAAzCI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEI,IAAA,CAAAC,MAAM;KAAc,WAAS,GACzCf,mBAAA,CAAuC;IAAlCI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEI,IAAA,CAAAC,MAAM;KAAW,OAAK,GAClCf,mBAAA,CAAuC;IAAlCI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEI,IAAA,CAAAC,MAAM;KAAW,OAAK,GAClCC,UAAgB,C,KAGpBhB,mBAAA,CAUQ,iB,kBATNC,mBAAA,CAQKgB,SAAA,QAzBbC,WAAA,CAiB+BX,QAAA,CAAAY,iBAAiB,EAA7BC,QAAQ;yBAAnBnB,mBAAA,CAQK;MARsCoB,GAAG,EAAED,QAAQ,CAACE;QACvDtB,mBAAA,CAA8B,YAAAuB,gBAAA,CAAvBH,QAAQ,CAACI,MAAM,OACtBxB,mBAAA,CAAiC,YAAAuB,gBAAA,CAA1BH,QAAQ,CAACK,SAAS,OACzBzB,mBAAA,CAAgC,YAAAuB,gBAAA,CAAzBH,QAAQ,CAACM,QAAQ,OACxB1B,mBAAA,CAAqC,YAAAuB,gBAAA,CAA9BH,QAAQ,CAACO,OAAO,CAACC,KAAK,OAC7B5B,mBAAA,CAA2C,YAAAuB,gBAAA,CAApCH,QAAQ,CAACO,OAAO,CAACE,WAAW,OACnC7B,mBAAA,CAA0D;MAAjDI,OAAK,EAAAM,MAAA,IAAEH,QAAA,CAAAuB,eAAe,CAACV,QAAQ;OAAG,QAAM,KAvB3DW,UAAA,GAwBU/B,mBAAA,CAAgE;MAAvDI,OAAK,EAAAM,MAAA,IAAEH,QAAA,CAAAyB,cAAc,CAACZ,QAAQ,CAACI,MAAM;OAAG,QAAM,KAxBjES,UAAA,E;iBA6BIC,YAAA,CAIEC,2BAAA;IAHCC,SAAS,EAAEzB,KAAA,CAAA0B,iBAAiB;IAC5BC,OAAK,EAAE/B,QAAA,CAAAgC,aAAa;IACpBC,KAAG,EAAEjC,QAAA,CAAAkC;kDAERP,YAAA,CAKEQ,8BAAA;IAJCN,SAAS,EAAEzB,KAAA,CAAAgC,oBAAoB;IAC/BvB,QAAQ,EAAET,KAAA,CAAAiC,gBAAgB;IAC1BN,OAAK,EAAE/B,QAAA,CAAAsC,gBAAgB;IACvBC,gBAAe,EAAEvC,QAAA,CAAAwC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}