{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-95d81cca\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"management-section\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Manage Orders\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Order ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Order Date\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Payment Method\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Shipped/Collected\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Total Amount\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Cart ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Shipping ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Actions\")])], -1 /* HOISTED */));\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"table\", null, [_hoisted_3, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredOrders, order => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: order.orderID\n    }, [_createElementVNode(\"td\", null, _toDisplayString(order.orderID), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.orderDate), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.orderStatus), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.paymentMethod), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.shippedOrCollected ? 'Yes' : 'No'), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.totalAmount), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.cart.cartID), 1 /* TEXT */), _createCommentVNode(\" Corrected to use cartID \"), _createElementVNode(\"td\", null, _toDisplayString(order.shipping.shippingID), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.deleteOrder(order.orderID)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_4)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","filteredOrders","order","key","orderID","_toDisplayString","orderDate","orderStatus","paymentMethod","shippedOrCollected","totalAmount","cart","cartID","_createCommentVNode","shipping","shippingID","onClick","$event","$options","deleteOrder","_hoisted_4"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<!-- src/views/adminviews/OrderManagement.vue -->\r\n\r\n<template>\r\n  <div class=\"management-section\">\r\n    <h3>Manage Orders</h3>\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>Order ID</th>\r\n        <th>Order Date</th>\r\n        <th>Status</th>\r\n        <th>Payment Method</th>\r\n        <th>Shipped/Collected</th>\r\n        <th>Total Amount</th>\r\n        <th>Cart ID</th>\r\n        <th>Shipping ID</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"order in filteredOrders\" :key=\"order.orderID\">\r\n        <td>{{ order.orderID }}</td>\r\n        <td>{{ order.orderDate }}</td>\r\n        <td>{{ order.orderStatus }}</td>\r\n        <td>{{ order.paymentMethod }}</td>\r\n        <td>{{ order.shippedOrCollected ? 'Yes' : 'No' }}</td>\r\n        <td>{{ order.totalAmount }}</td>\r\n        <td>{{ order.cart.cartID }}</td> <!-- Corrected to use cartID -->\r\n        <td>{{ order.shipping.shippingID }}</td>\r\n        <td>\r\n          <button @click=\"deleteOrder(order.orderID)\">Delete</button>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getOrders, deleteOrder, createOrder } from '@/services/orderService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      filteredOrders: [],\r\n      searchQuery: '',\r\n      filterKey: '', // Assuming you might have a filter functionality\r\n      newOrder: {\r\n        orderID: '',\r\n        orderDate: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        shippedOrCollected: false,\r\n        totalAmount: '',\r\n        cart: {\r\n          cartID: '',\r\n          itemsQuantity: '',\r\n          totalPrice: '',\r\n          customer: {\r\n            customerID: '',\r\n            customerName: '',\r\n            email: '',\r\n            phone: ''\r\n          }\r\n        },\r\n        shipping: {\r\n          shippingID: '',\r\n          deliveryAddress: '',\r\n          orderStatus: '',\r\n          shippingFee: ''\r\n        }\r\n      },\r\n      showAddModal: false,\r\n      showUpdateModal: false,\r\n      selectedOrder: null\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchOrders();\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        this.orders = await getOrders();\r\n        this.filteredOrders = this.orders;\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n      }\r\n    },\r\n    async deleteOrder(orderID) {\r\n      if (confirm('Are you sure you want to delete this order?')) {\r\n        try {\r\n          await deleteOrder(orderID);\r\n          await this.fetchOrders();\r\n        } catch (error) {\r\n          console.error('Error deleting order:', error);\r\n        }\r\n      }\r\n    },\r\n    openAddModal() {\r\n      this.showAddModal = true;\r\n    },\r\n    closeAddModal() {\r\n      this.showAddModal = false;\r\n      this.newOrder = { ...this.$data.newOrder }; // Reset to the default state\r\n    },\r\n    async submitAdd() {\r\n      try {\r\n        await createOrder(this.newOrder);\r\n        await this.fetchOrders();\r\n        this.closeAddModal();\r\n      } catch (error) {\r\n        console.error('Error adding order:', error);\r\n      }\r\n    },\r\n    openUpdateModal(order) {\r\n      this.selectedOrder = { ...order };\r\n      this.showUpdateModal = true;\r\n    },\r\n    closeUpdateModal() {\r\n      this.showUpdateModal = false;\r\n      this.selectedOrder = null;\r\n    },\r\n    searchOrders() {\r\n      this.filteredOrders = this.orders.filter(order => {\r\n        return order.orderID.toString().includes(this.searchQuery) ||\r\n            order.orderStatus.toLowerCase().includes(this.searchQuery.toLowerCase());\r\n      });\r\n    },\r\n    filterOrders() {\r\n      this.filteredOrders = this.filterKey\r\n          ? this.orders.filter(order => order[this.filterKey].toString().toLowerCase().includes(this.searchQuery.toLowerCase()))\r\n          : this.orders;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.management-section {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  border-radius: 8px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980b9;\r\n}\r\n</style>\r\n<!--<template>-->\r\n<!--  <div>-->\r\n<!--    <h1>Order Management</h1>-->\r\n<!--    &lt;!&ndash; Order Table &ndash;&gt;-->\r\n<!--    <table class=\"table\">-->\r\n<!--      <thead>-->\r\n<!--      <tr>-->\r\n<!--        <th>Order ID</th>-->\r\n<!--        <th>Customer Name</th>-->\r\n<!--        <th>Order Date</th>-->\r\n<!--        <th>Total Amount</th>-->\r\n<!--        <th>Status</th>-->\r\n<!--        <th>Actions</th>-->\r\n<!--      </tr>-->\r\n<!--      </thead>-->\r\n<!--      <tbody>-->\r\n<!--      <tr v-for=\"order in orders\" :key=\"order.orderID\">-->\r\n<!--        <td>{{ order.orderID }}</td>-->\r\n<!--        <td>{{ order.customerName }}</td>-->\r\n<!--        <td>{{ order.orderDate }}</td>-->\r\n<!--        <td>{{ order.totalAmount }}</td>-->\r\n<!--        <td>{{ order.status }}</td>-->\r\n<!--        <td>-->\r\n<!--          <button @click=\"editOrder(order.orderID)\">Edit</button>-->\r\n<!--          <button @click=\"deleteOrder(order.orderID)\">Delete</button>-->\r\n<!--        </td>-->\r\n<!--      </tr>-->\r\n<!--      </tbody>-->\r\n<!--    </table>-->\r\n\r\n<!--    &lt;!&ndash; Form for Creating/Updating Orders &ndash;&gt;-->\r\n<!--    <div>-->\r\n<!--      <h2>{{ isEditMode ? 'Edit Order' : 'Create Order' }}</h2>-->\r\n<!--      <form @submit.prevent=\"submitOrder\">-->\r\n<!--        &lt;!&ndash; Form fields for order properties &ndash;&gt;-->\r\n<!--        <input v-model=\"form.customerName\" placeholder=\"Customer Name\" />-->\r\n<!--        <input v-model=\"form.totalAmount\" placeholder=\"Total Amount\" />-->\r\n<!--        <select v-model=\"form.status\">-->\r\n<!--          <option>Pending</option>-->\r\n<!--          <option>Shipped</option>-->\r\n<!--          <option>Delivered</option>-->\r\n<!--        </select>-->\r\n<!--        <button type=\"submit\">{{ isEditMode ? 'Update' : 'Create' }}</button>-->\r\n<!--      </form>-->\r\n<!--    </div>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import axios from 'axios';-->\r\n\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      orders: [],       // Holds the list of all orders-->\r\n<!--      form: {-->\r\n<!--        orderID: null,-->\r\n<!--        customerName: '',-->\r\n<!--        totalAmount: '',-->\r\n<!--        status: 'Pending'-->\r\n<!--      },-->\r\n<!--      isEditMode: false, // Track whether we are editing or creating-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    // Fetch all orders from the backend-->\r\n<!--    async fetchOrders() {-->\r\n<!--      try {-->\r\n<!--        const response = await axios.get('http://localhost:5119/order/getAll');-->\r\n<!--        this.orders = response.data;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error fetching orders:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Submit a new order or update an existing one-->\r\n<!--    async submitOrder() {-->\r\n<!--      try {-->\r\n<!--        if (this.isEditMode) {-->\r\n<!--          await axios.post('http://localhost:5119/order/update', this.form);-->\r\n<!--        } else {-->\r\n<!--          await axios.post('http://localhost:5119/order/create', this.form);-->\r\n<!--        }-->\r\n<!--        this.fetchOrders();  // Refresh the orders list-->\r\n<!--        this.resetForm();    // Reset the form-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error submitting order:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Edit an existing order-->\r\n<!--    async editOrder(orderID) {-->\r\n<!--      try {-->\r\n<!--        const response = await axios.get(`http://localhost:5119/order/read/${orderID}`);-->\r\n<!--        this.form = { ...response.data }; // Populate the form with existing data-->\r\n<!--        this.isEditMode = true;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error reading order:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Delete an order-->\r\n<!--    async deleteOrder(orderID) {-->\r\n<!--      try {-->\r\n<!--        await axios.delete(`http://localhost:5119/order/delete/${orderID}`);-->\r\n<!--        this.fetchOrders();  // Refresh the orders list after deletion-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error deleting order:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Reset form after submission or canceling-->\r\n<!--    resetForm() {-->\r\n<!--      this.form = {-->\r\n<!--        orderID: null,-->\r\n<!--        customerName: '',-->\r\n<!--        totalAmount: '',-->\r\n<!--        status: 'Pending',-->\r\n<!--      };-->\r\n<!--      this.isEditMode = false;-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  mounted() {-->\r\n<!--    // Fetch orders when the component is mounted-->\r\n<!--    this.fetchOrders();-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--/* Add styling for table and form here */-->\r\n<!--.table {-->\r\n<!--  width: 100%;-->\r\n<!--  border-collapse: collapse;-->\r\n<!--}-->\r\n<!--.table th, .table td {-->\r\n<!--  border: 1px solid #ddd;-->\r\n<!--  padding: 8px;-->\r\n<!--}-->\r\n<!--.table th {-->\r\n<!--  background-color: #f4f4f4;-->\r\n<!--}-->\r\n<!--</style>-->\r\n"],"mappings":";;;EAGOA,KAAK,EAAC;AAAoB;gEAC7BC,mBAAA,CAAsB,YAAlB,eAAa;gEAEfA,mBAAA,CAYQ,gB,aAXRA,mBAAA,CAUK,a,aATHA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAmB,YAAf,YAAU,G,aACdA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAuB,YAAnB,gBAAc,G,aAClBA,mBAAA,CAA0B,YAAtB,mBAAiB,G,aACrBA,mBAAA,CAAqB,YAAjB,cAAY,G,aAChBA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAoB,YAAhB,aAAW,G,aACfA,mBAAA,CAAgB,YAAZ,SAAO,E;mBAhBnB;;uBAGEC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,UAAsB,EACtBH,mBAAA,CA6BQ,gBA5BNI,UAYQ,EACRJ,mBAAA,CAcQ,iB,kBAbRC,mBAAA,CAYKI,SAAA,QAhCXC,WAAA,CAoB0BC,KAAA,CAAAC,cAAc,EAAvBC,KAAK;yBAAhBR,mBAAA,CAYK;MAZgCS,GAAG,EAAED,KAAK,CAACE;QAC9CX,mBAAA,CAA4B,YAAAY,gBAAA,CAArBH,KAAK,CAACE,OAAO,kBACpBX,mBAAA,CAA8B,YAAAY,gBAAA,CAAvBH,KAAK,CAACI,SAAS,kBACtBb,mBAAA,CAAgC,YAAAY,gBAAA,CAAzBH,KAAK,CAACK,WAAW,kBACxBd,mBAAA,CAAkC,YAAAY,gBAAA,CAA3BH,KAAK,CAACM,aAAa,kBAC1Bf,mBAAA,CAAsD,YAAAY,gBAAA,CAA/CH,KAAK,CAACO,kBAAkB,iCAC/BhB,mBAAA,CAAgC,YAAAY,gBAAA,CAAzBH,KAAK,CAACQ,WAAW,kBACxBjB,mBAAA,CAAgC,YAAAY,gBAAA,CAAzBH,KAAK,CAACS,IAAI,CAACC,MAAM,kBAASC,mBAAA,6BAAgC,EACjEpB,mBAAA,CAAwC,YAAAY,gBAAA,CAAjCH,KAAK,CAACY,QAAQ,CAACC,UAAU,kBAChCtB,mBAAA,CAEK,aADHA,mBAAA,CAA2D;MAAlDuB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACjB,KAAK,CAACE,OAAO;OAAG,QAAM,iBA9B5DgB,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}