{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-95d81cca\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Order Management\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Order ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Customer\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Order Date\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Total Amount\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.orders, order => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: order.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(order.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.customer.username), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.orderDate), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.totalAmount), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.orderStatus), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","$data","orders","order","key","id","_toDisplayString","customer","username","orderDate","totalAmount","orderStatus"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<!--&lt;!&ndash;src/views/adminviews/OrderManagement.vue&ndash;&gt;-->\r\n\r\n<!--<template>-->\r\n<!--  <div class=\"management-section\">-->\r\n<!--    <h3>Manage Orders</h3>-->\r\n<!--    <table>-->\r\n<!--      <thead>-->\r\n<!--      <tr>-->\r\n<!--        <th>Order ID</th>-->\r\n<!--&lt;!&ndash;        <th>Customer Name</th>&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <th>Shipping Address</th>&ndash;&gt;-->\r\n<!--        <th>Order Date</th>-->\r\n<!--        <th>Status</th>-->\r\n<!--        <th>Payment Method</th>-->\r\n<!--        <th>Shipped/Collected</th>-->\r\n<!--        <th>Total Amount</th>-->\r\n<!--        <th>CartID</th>-->\r\n<!--        <th>ShippingID</th>-->\r\n<!--        <th>Actions</th>-->\r\n<!--      </tr>-->\r\n<!--      </thead>-->\r\n<!--      <tbody>-->\r\n<!--      <tr v-for=\"order in filteredOrders\" :key=\"order.orderID\">-->\r\n<!--        <td>{{ order.orderID }}</td>-->\r\n<!--&lt;!&ndash;        <td>{{ order.cart.customerName }}</td>&ndash;&gt;-->\r\n<!--&lt;!&ndash;        <td>{{ order.shipping.address }}</td>&ndash;&gt;-->\r\n<!--        <td>{{ order.orderDate }}</td>-->\r\n<!--        <td>{{ order.orderStatus }}</td>-->\r\n<!--        <td>{{ order.paymentMethod }}</td>-->\r\n<!--        <td>{{ order.shippedOrCollected ? 'Yes' : 'No' }}</td>-->\r\n<!--        <td>{{ order.totalAmount }}</td>-->\r\n<!--                <td>{{ order.cart.cartID }}</td>-->\r\n<!--        <td>{{ order.shipping.shippingID }}</td>-->\r\n<!--        <td><button @click=\"deleteOrder(order.orderID)\">Delete</button></td>-->\r\n<!--      </tr>-->\r\n<!--      </tbody>-->\r\n<!--    </table>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import { getOrders, deleteOrder, createOrder } from '@/services/orderService';-->\r\n\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      orders: [],-->\r\n<!--      filteredOrders: [],-->\r\n<!--      selectedOrder: null,-->\r\n<!--      newOrder: {-->\r\n<!--        orderID: '',-->\r\n<!--        orderDate: '',-->\r\n<!--        orderStatus: '',-->\r\n<!--        paymentMethod: '',-->\r\n<!--        shippedOrCollected: false,-->\r\n<!--        totalAmount: '',-->\r\n<!--        cart: {-->\r\n<!--          cartId: '',-->\r\n<!--          itemsQuantity: '',-->\r\n<!--          totalPrice:'',-->\r\n<!--          customer: {-->\r\n<!--            customerID: '',-->\r\n<!--            customerName: '',-->\r\n<!--            email: '',-->\r\n<!--            phone: ''-->\r\n<!--          }-->\r\n\r\n<!--        },-->\r\n<!--        shipping: {-->\r\n<!--          shippingID: '',-->\r\n<!--          deliveryAddress: '',-->\r\n<!--          orderStatus: '',-->\r\n<!--          shippingFee:''-->\r\n<!--        }-->\r\n<!--      },-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  async created() {-->\r\n<!--    await this.fetchOrders();-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    async fetchOrders() {-->\r\n<!--      try {-->\r\n<!--        this.orders = await getOrders();-->\r\n<!--        this.filteredOrders = this.orders;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error('Error fetching orders:', error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    async deleteOrder(orderID) {-->\r\n<!--      if (confirm('Are you sure you want to delete this order?')) {-->\r\n<!--        try {-->\r\n<!--          await deleteOrder(orderID);-->\r\n<!--          await this.fetchOrders();-->\r\n<!--        } catch (error) {-->\r\n<!--          console.error('Error deleting order:', error);-->\r\n<!--        }-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    openAddModal() {-->\r\n<!--      this.showAddModal = true;-->\r\n<!--    },-->\r\n<!--    closeAddModal() {-->\r\n<!--      this.showAddModal = false;-->\r\n<!--      this.newOrder = {-->\r\n<!--        orderID: '',-->\r\n<!--        orderDate: '',-->\r\n<!--        orderStatus: '',-->\r\n<!--        paymentMethod: '',-->\r\n<!--        shippedOrCollected: false,-->\r\n<!--        totalAmount: '',-->\r\n<!--        cartID: '',-->\r\n<!--        shippingID: ''-->\r\n<!--      };-->\r\n<!--    },-->\r\n<!--    async submitAdd() {-->\r\n<!--      try {-->\r\n<!--        await createOrder(this.newOrder);-->\r\n<!--        await this.fetchOrders();-->\r\n<!--        this.closeAddModal();-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error('Error adding order:', error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    openUpdateModal(order) {-->\r\n<!--      this.selectedOrder = { ...order };-->\r\n<!--      this.showUpdateModal = true;-->\r\n<!--    },-->\r\n<!--    closeUpdateModal() {-->\r\n<!--      this.showUpdateModal = false;-->\r\n<!--      this.selectedOrder = null;-->\r\n<!--    },-->\r\n<!--    // async submitUpdate() {-->\r\n<!--    //   try {-->\r\n<!--    //     await updateOrder(this.selectedOrder);-->\r\n<!--    //     await this.fetchOrders();-->\r\n<!--    //     this.closeUpdateModal();-->\r\n<!--    //   } catch (error) {-->\r\n<!--    //     console.error('Error updating order:', error);-->\r\n<!--    //   }-->\r\n<!--    // },-->\r\n<!--    searchOrders() {-->\r\n<!--      this.filteredOrders = this.orders.filter(order => {-->\r\n<!--        return order.orderID.toString().includes(this.searchQuery) ||-->\r\n<!--               order.orderStatus.toLowerCase().includes(this.searchQuery.toLowerCase());-->\r\n<!--      });-->\r\n<!--    },-->\r\n<!--    filterOrders() {-->\r\n<!--      if (this.filterKey) {-->\r\n<!--        this.filteredOrders = this.orders.filter(order => {-->\r\n<!--          return order[this.filterKey].toString().toLowerCase().includes(this.searchQuery.toLowerCase());-->\r\n<!--        });-->\r\n<!--      } else {-->\r\n<!--        this.filteredOrders = this.orders;-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--.management-section {-->\r\n<!--  background-color: #fff;-->\r\n<!--  padding: 20px;-->\r\n<!--  margin-bottom: 20px;-->\r\n<!--  border-radius: 8px;-->\r\n<!--}-->\r\n\r\n<!--table {-->\r\n<!--  width: 100%;-->\r\n<!--  border-collapse: collapse;-->\r\n<!--}-->\r\n\r\n<!--th, td {-->\r\n<!--  text-align: left;-->\r\n<!--  padding: 10px;-->\r\n<!--  border-bottom: 1px solid #ddd;-->\r\n<!--}-->\r\n\r\n<!--button {-->\r\n<!--  padding: 5px 10px;-->\r\n<!--  background-color: #3498db;-->\r\n<!--  color: #fff;-->\r\n<!--  border: none;-->\r\n<!--  border-radius: 4px;-->\r\n<!--  cursor: pointer;-->\r\n<!--}-->\r\n\r\n<!--button:hover {-->\r\n<!--  background-color: #2980b9;-->\r\n<!--}-->\r\n<!--</style>-->\r\n\r\n<template>\r\n  <div>\r\n    <h1>Order Management</h1>\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>Order ID</th>\r\n        <th>Customer</th>\r\n        <th>Order Date</th>\r\n        <th>Total Amount</th>\r\n        <th>Status</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"order in orders\" :key=\"order.id\">\r\n        <td>{{ order.id }}</td>\r\n        <td>{{ order.customer.username }}</td>\r\n        <td>{{ order.orderDate }}</td>\r\n        <td>{{ order.totalAmount }}</td>\r\n        <td>{{ order.orderStatus }}</td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getOrders } from '@/services/orderService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: []\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchOrders();\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        const response = await getOrders();\r\n        this.orders = response;\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* Add styling for table and form here */\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n.table th, .table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n}\r\n.table th {\r\n  background-color: #f4f4f4;\r\n}\r\n</style>\r\n"],"mappings":";;gEAmMIA,mBAAA,CAAyB,YAArB,kBAAgB;gEAElBA,mBAAA,CAQQ,gB,aAPRA,mBAAA,CAMK,a,aALHA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAmB,YAAf,YAAU,G,aACdA,mBAAA,CAAqB,YAAjB,cAAY,G,aAChBA,mBAAA,CAAe,YAAX,QAAM,E;;uBAThBC,mBAAA,CAsBM,cArBJC,UAAyB,EACzBF,mBAAA,CAmBQ,gBAlBNG,UAQQ,EACRH,mBAAA,CAQQ,iB,kBAPRC,mBAAA,CAMKG,SAAA,QArNXC,WAAA,CA+M0BC,KAAA,CAAAC,MAAM,EAAfC,KAAK;yBAAhBP,mBAAA,CAMK;MANwBQ,GAAG,EAAED,KAAK,CAACE;QACtCV,mBAAA,CAAuB,YAAAW,gBAAA,CAAhBH,KAAK,CAACE,EAAE,kBACfV,mBAAA,CAAsC,YAAAW,gBAAA,CAA/BH,KAAK,CAACI,QAAQ,CAACC,QAAQ,kBAC9Bb,mBAAA,CAA8B,YAAAW,gBAAA,CAAvBH,KAAK,CAACM,SAAS,kBACtBd,mBAAA,CAAgC,YAAAW,gBAAA,CAAzBH,KAAK,CAACO,WAAW,kBACxBf,mBAAA,CAAgC,YAAAW,gBAAA,CAAzBH,KAAK,CAACQ,WAAW,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}