{"ast":null,"code":"import { createOrder, updateOrder, deleteOrder, fetchOrders } from '@/services/orderService';\nexport default {\n  data() {\n    return {\n      orders: [],\n      isAddModalVisible: false,\n      isUpdateModalVisible: false,\n      orderForm: {\n        orderDate: '',\n        orderStatus: '',\n        paymentMethod: '',\n        totalAmount: ''\n      },\n      selectedOrder: null\n    };\n  },\n  methods: {\n    // Fetch all orders\n    async fetchOrders() {\n      try {\n        this.orders = await fetchOrders();\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n        alert('Failed to fetch orders.');\n      }\n    },\n    // Add a new order\n    async submitOrder() {\n      if (this.isValidForm()) {\n        try {\n          await createOrder(this.orderForm);\n          this.fetchOrders(); // Refresh the orders\n          this.closeAddModal();\n        } catch (error) {\n          console.error('Error creating order:', error);\n          alert('Failed to create order. Please try again.');\n        }\n      } else {\n        alert('Please fill in all required fields.');\n      }\n    },\n    // Validate form data\n    isValidForm() {\n      return this.orderForm.orderDate && this.orderForm.orderStatus && this.orderForm.paymentMethod && this.orderForm.totalAmount;\n    },\n    // Update an existing order\n    async updateOrder() {\n      if (this.isValidForm()) {\n        try {\n          await updateOrder(this.selectedOrder.orderID, this.selectedOrder);\n          this.fetchOrders(); // Refresh the orders\n          this.closeUpdateModal();\n        } catch (error) {\n          console.error('Error updating order:', error);\n          alert('Failed to update order.');\n        }\n      }\n    },\n    // Delete an order\n    async deleteOrder(orderID) {\n      if (confirm('Are you sure you want to delete this order?')) {\n        try {\n          await deleteOrder(orderID);\n          this.fetchOrders(); // Refresh the orders\n        } catch (error) {\n          console.error('Error deleting order:', error);\n          alert('Failed to delete order.');\n        }\n      }\n    },\n    // Open Add Order Modal\n    openAddModal() {\n      this.isAddModalVisible = true;\n      this.resetOrderForm();\n    },\n    // Close Add Order Modal\n    closeAddModal() {\n      this.isAddModalVisible = false;\n    },\n    // Open Update Order Modal\n    openUpdateModal(order) {\n      this.selectedOrder = {\n        ...order\n      }; // Create a copy of the order to avoid binding issues\n      this.isUpdateModalVisible = true;\n    },\n    // Close Update Order Modal\n    closeUpdateModal() {\n      this.isUpdateModalVisible = false;\n    },\n    // Reset order form after modal close\n    resetOrderForm() {\n      this.orderForm = {\n        orderDate: '',\n        orderStatus: '',\n        paymentMethod: '',\n        totalAmount: ''\n      };\n    }\n  },\n  mounted() {\n    this.fetchOrders(); // Fetch orders when the component is mounted\n  }\n};","map":{"version":3,"names":["createOrder","updateOrder","deleteOrder","fetchOrders","data","orders","isAddModalVisible","isUpdateModalVisible","orderForm","orderDate","orderStatus","paymentMethod","totalAmount","selectedOrder","methods","error","console","alert","submitOrder","isValidForm","closeAddModal","orderID","closeUpdateModal","confirm","openAddModal","resetOrderForm","openUpdateModal","order","mounted"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Order Management</h1>\r\n\r\n    <!-- Orders Table -->\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>Order ID</th>\r\n        <th>Order Date</th>\r\n        <th>Status</th>\r\n        <th>Payment Method</th>\r\n        <th>Total Amount</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"order in orders\" :key=\"order.orderID\">\r\n        <td>{{ order.orderID }}</td>\r\n        <td>{{ order.orderDate }}</td>\r\n        <td>{{ order.orderStatus }}</td>\r\n        <td>{{ order.paymentMethod }}</td>\r\n        <td>{{ order.totalAmount }}</td>\r\n        <td>\r\n          <button @click=\"openUpdateModal(order)\">Update</button>\r\n          <button @click=\"deleteOrder(order.orderID)\">Delete</button>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Add Order Modal -->\r\n    <div v-if=\"isAddModalVisible\">\r\n      <h2>Add Order</h2>\r\n      <input v-model=\"orderForm.orderDate\" placeholder=\"Order Date\">\r\n      <input v-model=\"orderForm.orderStatus\" placeholder=\"Order Status\">\r\n      <input v-model=\"orderForm.paymentMethod\" placeholder=\"Payment Method\">\r\n      <input v-model=\"orderForm.totalAmount\" placeholder=\"Total Amount\">\r\n      <button @click=\"submitOrder\">Submit</button>\r\n      <button @click=\"closeAddModal\">Cancel</button>\r\n    </div>\r\n\r\n    <!-- Update Order Modal -->\r\n    <div v-if=\"isUpdateModalVisible\">\r\n      <h2>Update Order</h2>\r\n      <input v-model=\"selectedOrder.orderDate\" placeholder=\"Order Date\">\r\n      <input v-model=\"selectedOrder.orderStatus\" placeholder=\"Order Status\">\r\n      <input v-model=\"selectedOrder.paymentMethod\" placeholder=\"Payment Method\">\r\n      <input v-model=\"selectedOrder.totalAmount\" placeholder=\"Total Amount\">\r\n      <button @click=\"updateOrder\">Submit</button>\r\n      <button @click=\"closeUpdateModal\">Cancel</button>\r\n    </div>\r\n\r\n    <!-- Add Order Button -->\r\n    <button @click=\"openAddModal\">Add New Order</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { createOrder, updateOrder, deleteOrder, fetchOrders } from '@/services/orderService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      isAddModalVisible: false,\r\n      isUpdateModalVisible: false,\r\n      orderForm: {\r\n        orderDate: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        totalAmount: ''\r\n      },\r\n      selectedOrder: null\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch all orders\r\n    async fetchOrders() {\r\n      try {\r\n        this.orders = await fetchOrders();\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n        alert('Failed to fetch orders.');\r\n      }\r\n    },\r\n\r\n    // Add a new order\r\n    async submitOrder() {\r\n      if (this.isValidForm()) {\r\n        try {\r\n          await createOrder(this.orderForm);\r\n          this.fetchOrders(); // Refresh the orders\r\n          this.closeAddModal();\r\n        } catch (error) {\r\n          console.error('Error creating order:', error);\r\n          alert('Failed to create order. Please try again.');\r\n        }\r\n      } else {\r\n        alert('Please fill in all required fields.');\r\n      }\r\n    },\r\n\r\n    // Validate form data\r\n    isValidForm() {\r\n      return this.orderForm.orderDate && this.orderForm.orderStatus &&\r\n          this.orderForm.paymentMethod && this.orderForm.totalAmount;\r\n    },\r\n\r\n    // Update an existing order\r\n    async updateOrder() {\r\n      if (this.isValidForm()) {\r\n        try {\r\n          await updateOrder(this.selectedOrder.orderID, this.selectedOrder);\r\n          this.fetchOrders(); // Refresh the orders\r\n          this.closeUpdateModal();\r\n        } catch (error) {\r\n          console.error('Error updating order:', error);\r\n          alert('Failed to update order.');\r\n        }\r\n      }\r\n    },\r\n\r\n    // Delete an order\r\n    async deleteOrder(orderID) {\r\n      if (confirm('Are you sure you want to delete this order?')) {\r\n        try {\r\n          await deleteOrder(orderID);\r\n          this.fetchOrders(); // Refresh the orders\r\n        } catch (error) {\r\n          console.error('Error deleting order:', error);\r\n          alert('Failed to delete order.');\r\n        }\r\n      }\r\n    },\r\n\r\n    // Open Add Order Modal\r\n    openAddModal() {\r\n      this.isAddModalVisible = true;\r\n      this.resetOrderForm();\r\n    },\r\n\r\n    // Close Add Order Modal\r\n    closeAddModal() {\r\n      this.isAddModalVisible = false;\r\n    },\r\n\r\n    // Open Update Order Modal\r\n    openUpdateModal(order) {\r\n      this.selectedOrder = { ...order }; // Create a copy of the order to avoid binding issues\r\n      this.isUpdateModalVisible = true;\r\n    },\r\n\r\n    // Close Update Order Modal\r\n    closeUpdateModal() {\r\n      this.isUpdateModalVisible = false;\r\n    },\r\n\r\n    // Reset order form after modal close\r\n    resetOrderForm() {\r\n      this.orderForm = {\r\n        orderDate: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        totalAmount: ''\r\n      };\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchOrders(); // Fetch orders when the component is mounted\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add your styling here */\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}