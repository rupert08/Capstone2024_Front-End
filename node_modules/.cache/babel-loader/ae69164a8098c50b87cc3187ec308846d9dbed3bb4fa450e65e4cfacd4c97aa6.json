{"ast":null,"code":"import { getOrders, createOrder, updateOrder, deleteOrder } from '@/services/orderService';\nexport default {\n  data() {\n    return {\n      orders: [],\n      showModal: false,\n      isEditMode: false,\n      orderForm: {\n        id: '',\n        orderDate: '',\n        totalAmount: '',\n        orderStatus: '',\n        paymentMethod: '',\n        shippedOrCollected: false\n      }\n    };\n  },\n  methods: {\n    fetchOrders() {\n      getOrders().then(data => {\n        this.orders = data;\n      }).catch(error => {\n        console.error('Error fetching orders:', error);\n      });\n    },\n    showCreateOrderModal() {\n      this.isEditMode = false;\n      this.orderForm = {\n        id: '',\n        orderDate: '',\n        totalAmount: '',\n        orderStatus: '',\n        paymentMethod: '',\n        shippedOrCollected: false\n      };\n      this.showModal = true;\n    },\n    showEditOrderModal(order) {\n      this.isEditMode = true;\n      this.orderForm = {\n        ...order\n      };\n      this.showModal = true;\n    },\n    createOrder() {\n      createOrder(this.orderForm).then(() => {\n        this.fetchOrders();\n        this.closeModal();\n      }).catch(error => {\n        console.error('Error creating order:', error);\n      });\n    },\n    updateOrder() {\n      updateOrder(this.orderForm).then(() => {\n        this.fetchOrders();\n        this.closeModal();\n      }).catch(error => {\n        console.error('Error updating order:', error);\n      });\n    },\n    deleteOrder(orderID) {\n      deleteOrder(orderID).then(() => {\n        this.fetchOrders();\n      }).catch(error => {\n        console.error('Error deleting order:', error);\n      });\n    },\n    closeModal() {\n      this.showModal = false;\n    }\n  },\n  mounted() {\n    this.fetchOrders();\n  }\n};","map":{"version":3,"names":["getOrders","createOrder","updateOrder","deleteOrder","data","orders","showModal","isEditMode","orderForm","id","orderDate","totalAmount","orderStatus","paymentMethod","shippedOrCollected","methods","fetchOrders","then","catch","error","console","showCreateOrderModal","showEditOrderModal","order","closeModal","orderID","mounted"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-management\">\r\n    <h1>Order Management</h1>\r\n    <button @click=\"showCreateOrderModal\">Create Order</button>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>Order Date</th>\r\n          <th>Total Amount</th>\r\n          <th>Status</th>\r\n          <th>Payment Method</th>\r\n          <th>Shipped/Collected</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"order in orders\" :key=\"order.orderID\">\r\n          <td>{{ order.orderID }}</td>\r\n          <td>{{ order.orderDate }}</td>\r\n          <td>{{ order.totalAmount }}</td>\r\n          <td>{{ order.orderStatus }}</td>\r\n          <td>{{ order.paymentMethod }}</td>\r\n          <td>{{ order.shippedOrCollected ? 'Yes' : 'No' }}</td>\r\n          <td>\r\n            <button @click=\"showEditOrderModal(order)\">Edit</button>\r\n            <button @click=\"deleteOrder(order.orderID)\">Delete</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Create/Edit Order Modal -->\r\n    <div v-if=\"showModal\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <h2>{{ isEditMode ? 'Edit Order' : 'Create Order' }}</h2>\r\n        <form @submit.prevent=\"isEditMode ? updateOrder() : createOrder()\">\r\n          <label for=\"orderDate\">Order Date:</label>\r\n          <input type=\"date\" v-model=\"orderForm.orderDate\" required />\r\n\r\n          <label for=\"totalAmount\">Total Amount:</label>\r\n          <input type=\"number\" v-model=\"orderForm.totalAmount\" required />\r\n\r\n          <label for=\"orderStatus\">Status:</label>\r\n          <select v-model=\"orderForm.orderStatus\" required>\r\n            <option value=\"PENDING\">Pending</option>\r\n            <option value=\"SHIPPED\">Shipped</option>\r\n            <option value=\"DELIVERED\">Delivered</option>\r\n          </select>\r\n\r\n          <label for=\"paymentMethod\">Payment Method:</label>\r\n          <select v-model=\"orderForm.paymentMethod\" required>\r\n            <option value=\"CREDIT_CARD\">Credit Card</option>\r\n            <option value=\"DEBIT_CARD\">Debit Card</option>\r\n            <option value=\"PAYPAL\">PayPal</option>\r\n            <option value=\"CASH_ON_DELIVERY\">Cash on Delivery</option>\r\n          </select>\r\n\r\n          <label for=\"shippedOrCollected\">Shipped/Collected:</label>\r\n          <input type=\"checkbox\" v-model=\"orderForm.shippedOrCollected\" />\r\n\r\n          <button type=\"submit\">{{ isEditMode ? 'Update' : 'Create' }}</button>\r\n          <button type=\"button\" @click=\"closeModal\">Cancel</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getOrders, createOrder, updateOrder, deleteOrder } from '@/services/orderService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      showModal: false,\r\n      isEditMode: false,\r\n      orderForm: {\r\n        id: '',\r\n        orderDate: '',\r\n        totalAmount: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        shippedOrCollected: false,\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    fetchOrders() {\r\n      getOrders()\r\n          .then(data => {\r\n            this.orders = data;\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching orders:', error);\r\n          });\r\n    },\r\n    showCreateOrderModal() {\r\n      this.isEditMode = false;\r\n      this.orderForm = {\r\n        id: '',\r\n        orderDate: '',\r\n        totalAmount: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        shippedOrCollected: false,\r\n      };\r\n      this.showModal = true;\r\n    },\r\n    showEditOrderModal(order) {\r\n      this.isEditMode = true;\r\n      this.orderForm = { ...order };\r\n      this.showModal = true;\r\n    },\r\n    createOrder() {\r\n      createOrder(this.orderForm)\r\n          .then(() => {\r\n            this.fetchOrders();\r\n            this.closeModal();\r\n          })\r\n          .catch(error => {\r\n            console.error('Error creating order:', error);\r\n          });\r\n    },\r\n    updateOrder() {\r\n      updateOrder(this.orderForm)\r\n          .then(() => {\r\n            this.fetchOrders();\r\n            this.closeModal();\r\n          })\r\n          .catch(error => {\r\n            console.error('Error updating order:', error);\r\n          });\r\n    },\r\n    deleteOrder(orderID) {\r\n      deleteOrder(orderID)\r\n          .then(() => {\r\n            this.fetchOrders();\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting order:', error);\r\n          });\r\n    },\r\n    closeModal() {\r\n      this.showModal = false;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchOrders();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.order-management {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\n.modal {\r\n  display: block;\r\n  position: fixed;\r\n  z-index: 1000;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: auto;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.modal-content {\r\n  background-color: #fff;\r\n  margin: 10% auto;\r\n  padding: 20px;\r\n  border: 1px solid #888;\r\n  width: 50%;\r\n}\r\n</style>"],"mappings":"AAsEA,SAASA,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAAEC,WAAU,QAAS,yBAAyB;AAE1F,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE;QACTC,EAAE,EAAE,EAAE;QACNC,SAAS,EAAE,EAAE;QACbC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE,EAAE;QACfC,aAAa,EAAE,EAAE;QACjBC,kBAAkB,EAAE;MACtB;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZhB,SAAS,CAAC,EACLiB,IAAI,CAACb,IAAG,IAAK;QACZ,IAAI,CAACC,MAAK,GAAID,IAAI;MACpB,CAAC,EACAc,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IACR,CAAC;IACDE,oBAAoBA,CAAA,EAAG;MACrB,IAAI,CAACd,UAAS,GAAI,KAAK;MACvB,IAAI,CAACC,SAAQ,GAAI;QACfC,EAAE,EAAE,EAAE;QACNC,SAAS,EAAE,EAAE;QACbC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE,EAAE;QACfC,aAAa,EAAE,EAAE;QACjBC,kBAAkB,EAAE;MACtB,CAAC;MACD,IAAI,CAACR,SAAQ,GAAI,IAAI;IACvB,CAAC;IACDgB,kBAAkBA,CAACC,KAAK,EAAE;MACxB,IAAI,CAAChB,UAAS,GAAI,IAAI;MACtB,IAAI,CAACC,SAAQ,GAAI;QAAE,GAAGe;MAAM,CAAC;MAC7B,IAAI,CAACjB,SAAQ,GAAI,IAAI;IACvB,CAAC;IACDL,WAAWA,CAAA,EAAG;MACZA,WAAW,CAAC,IAAI,CAACO,SAAS,EACrBS,IAAI,CAAC,MAAM;QACV,IAAI,CAACD,WAAW,CAAC,CAAC;QAClB,IAAI,CAACQ,UAAU,CAAC,CAAC;MACnB,CAAC,EACAN,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACR,CAAC;IACDjB,WAAWA,CAAA,EAAG;MACZA,WAAW,CAAC,IAAI,CAACM,SAAS,EACrBS,IAAI,CAAC,MAAM;QACV,IAAI,CAACD,WAAW,CAAC,CAAC;QAClB,IAAI,CAACQ,UAAU,CAAC,CAAC;MACnB,CAAC,EACAN,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACR,CAAC;IACDhB,WAAWA,CAACsB,OAAO,EAAE;MACnBtB,WAAW,CAACsB,OAAO,EACdR,IAAI,CAAC,MAAM;QACV,IAAI,CAACD,WAAW,CAAC,CAAC;MACpB,CAAC,EACAE,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACR,CAAC;IACDK,UAAUA,CAAA,EAAG;MACX,IAAI,CAAClB,SAAQ,GAAI,KAAK;IACxB;EACF,CAAC;EACDoB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACV,WAAW,CAAC,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}