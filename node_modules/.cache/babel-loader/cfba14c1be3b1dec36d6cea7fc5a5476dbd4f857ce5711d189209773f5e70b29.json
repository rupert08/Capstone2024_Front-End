{"ast":null,"code":"import AddCustomerModal from '@/modals/AddCustomerModal.vue';\nimport UpdateCustomerModal from '@/modals/UpdateCustomerModal.vue';\nimport { getCustomers, deleteCustomer, updateCustomer, createCustomer } from '@/services/customerService';\nexport default {\n  components: {\n    AddCustomerModal,\n    UpdateCustomerModal\n  },\n  data() {\n    return {\n      customers: [],\n      sortKey: '',\n      sortAsc: true,\n      isAddModalVisible: false,\n      isUpdateModalVisible: false,\n      selectedCustomer: null,\n      searchQuery: ''\n    };\n  },\n  async created() {\n    await this.fetchCustomers();\n  },\n  computed: {\n    filteredCustomers() {\n      return this.customers.filter(customer => {\n        const query = this.searchQuery.toLowerCase();\n        return customer.firstName.toLowerCase().includes(query) || customer.lastName.toLowerCase().includes(query) || customer.contact && customer.contact.email.toLowerCase().includes(query) || customer.contact && customer.contact.phoneNumber.includes(query);\n      });\n    }\n  },\n  methods: {\n    async fetchCustomers() {\n      try {\n        this.customers = await getCustomers();\n      } catch (error) {\n        console.error('Error fetching customers:', error);\n      }\n    },\n    openAddModal() {\n      this.isAddModalVisible = true;\n    },\n    closeAddModal() {\n      this.isAddModalVisible = false;\n    },\n    openUpdateModal(customer) {\n      this.selectedCustomer = customer;\n      this.isUpdateModalVisible = true;\n    },\n    closeUpdateModal() {\n      this.isUpdateModalVisible = false;\n    },\n    async addCustomer(newCustomer) {\n      try {\n        await createCustomer(newCustomer);\n        await this.fetchCustomers(); // Refresh the customer list after addition\n        this.closeAddModal();\n      } catch (error) {\n        console.error('Error adding customer:', error);\n      }\n    },\n    async updateCustomer(customerId, updatedCustomer) {\n      if (!customerId || customerId === 'undefined') {\n        console.error('Invalid Customer ID');\n        return;\n      }\n      try {\n        await updateCustomer(customerId, updatedCustomer);\n        this.fetchCustomers();\n      } catch (error) {\n        console.error('Error updating customer:', error);\n      }\n    },\n    async removeCustomer(customerId) {\n      if (confirm('Are you sure you want to delete this customer?')) {\n        try {\n          await deleteCustomer(customerId);\n          this.fetchCustomers();\n        } catch (error) {\n          console.error('Error deleting customer:', error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["AddCustomerModal","UpdateCustomerModal","getCustomers","deleteCustomer","updateCustomer","createCustomer","components","data","customers","sortKey","sortAsc","isAddModalVisible","isUpdateModalVisible","selectedCustomer","searchQuery","created","fetchCustomers","computed","filteredCustomers","filter","customer","query","toLowerCase","firstName","includes","lastName","contact","email","phoneNumber","methods","error","console","openAddModal","closeAddModal","openUpdateModal","closeUpdateModal","addCustomer","newCustomer","customerId","updatedCustomer","removeCustomer","confirm"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\CustomerManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"management-section\">\r\n    <h3>Manage Customers</h3>\r\n<!--    <button @click=\"openAddModal\">Add Customer</button>-->\r\n    <input type=\"text\" v-model=\"searchQuery\" placeholder=\"Search customers...\" />\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortBy('id')\">ID</th>\r\n          <th @click=\"sortBy('firstName')\">First Name</th>\r\n          <th @click=\"sortBy('lastName')\">Last Name</th>\r\n          <th @click=\"sortBy('email')\">Email</th>\r\n          <th @click=\"sortBy('phone')\">Phone</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"customer in filteredCustomers\" :key=\"customer.id\">\r\n          <td>{{ customer.userId }}</td>\r\n          <td>{{ customer.firstName }}</td>\r\n          <td>{{ customer.lastName }}</td>\r\n          <td>{{ customer.contact.email }}</td>\r\n          <td>{{ customer.contact.phoneNumber }}</td>\r\n          <button @click=\"openUpdateModal(customer)\">Update</button>\r\n          <button @click=\"removeCustomer(customer.userId)\">Delete</button>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <!-- Modals -->\r\n    <AddCustomerModal\r\n      :isVisible=\"isAddModalVisible\"\r\n      @close=\"closeAddModal\"\r\n      @add=\"addCustomer\"\r\n    />\r\n    <UpdateCustomerModal\r\n      :isVisible=\"isUpdateModalVisible\"\r\n      :customer=\"selectedCustomer\"\r\n      @close=\"closeUpdateModal\"\r\n      @update-customer=\"updateCustomer\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AddCustomerModal from '@/modals/AddCustomerModal.vue';\r\nimport UpdateCustomerModal from '@/modals/UpdateCustomerModal.vue';\r\nimport { getCustomers, deleteCustomer, updateCustomer, createCustomer } from '@/services/customerService';\r\n\r\nexport default {\r\n  components: {\r\n    AddCustomerModal,\r\n    UpdateCustomerModal\r\n  },\r\n  data() {\r\n    return {\r\n      customers: [],\r\n      sortKey: '',\r\n      sortAsc: true,\r\n      isAddModalVisible: false,\r\n      isUpdateModalVisible: false,\r\n      selectedCustomer: null,\r\n      searchQuery: ''\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchCustomers();\r\n  },\r\n  computed: {\r\n    filteredCustomers() {\r\n      return this.customers.filter(customer => {\r\n        const query = this.searchQuery.toLowerCase();\r\n        return (\r\n          customer.firstName.toLowerCase().includes(query) ||\r\n          customer.lastName.toLowerCase().includes(query) ||\r\n          (customer.contact && customer.contact.email.toLowerCase().includes(query)) ||\r\n          (customer.contact && customer.contact.phoneNumber.includes(query))\r\n        );\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchCustomers() {\r\n      try {\r\n        this.customers = await getCustomers();\r\n      } catch (error) {\r\n        console.error('Error fetching customers:', error);\r\n      }\r\n    },\r\n    openAddModal() {\r\n      this.isAddModalVisible = true;\r\n    },\r\n    closeAddModal() {\r\n      this.isAddModalVisible = false;\r\n    },\r\n    openUpdateModal(customer) {\r\n      this.selectedCustomer = customer;\r\n      this.isUpdateModalVisible = true;\r\n    },\r\n    closeUpdateModal() {\r\n      this.isUpdateModalVisible = false;\r\n    },\r\n    async addCustomer(newCustomer) {\r\n      try {\r\n        await createCustomer(newCustomer);\r\n        await this.fetchCustomers(); // Refresh the customer list after addition\r\n        this.closeAddModal();\r\n      } catch (error) {\r\n        console.error('Error adding customer:', error);\r\n      }\r\n    },\r\n    async updateCustomer(customerId, updatedCustomer) {\r\n      if (!customerId || customerId === 'undefined') {\r\n        console.error('Invalid Customer ID');\r\n        return;\r\n      }\r\n      try {\r\n        await updateCustomer(customerId, updatedCustomer);\r\n        this.fetchCustomers();\r\n      } catch (error) {\r\n        console.error('Error updating customer:', error);\r\n      }\r\n    },\r\n    async removeCustomer(customerId) {\r\n      if (confirm('Are you sure you want to delete this customer?')) {\r\n        try {\r\n          await deleteCustomer(customerId);\r\n          this.fetchCustomers();\r\n        } catch (error) {\r\n          console.error('Error deleting customer:', error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.management-section {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  border-radius: 8px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}