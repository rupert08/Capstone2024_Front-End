{"ast":null,"code":"import { getOrders, deleteOrder, createOrder } from '@/services/orderService';\nexport default {\n  data() {\n    return {\n      orders: [],\n      filteredOrders: [],\n      selectedOrder: null,\n      newOrder: {\n        orderID: '',\n        orderDate: '',\n        orderStatus: '',\n        paymentMethod: '',\n        shippedOrCollected: false,\n        totalAmount: '',\n        cart: {\n          cartId: '',\n          itemsQuantity: '',\n          totalPrice: '',\n          customer: {\n            customerID: '',\n            customerName: '',\n            email: '',\n            phone: ''\n          }\n        },\n        shipping: {\n          shippingID: '',\n          deliveryAddress: '',\n          orderStatus: '',\n          shippingFee: ''\n        }\n      }\n    };\n  },\n  async created() {\n    await this.fetchOrders();\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        this.orders = await getOrders();\n        this.filteredOrders = this.orders;\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    },\n    async deleteOrder(orderID) {\n      if (confirm('Are you sure you want to delete this order?')) {\n        try {\n          await deleteOrder(orderID);\n          await this.fetchOrders();\n        } catch (error) {\n          console.error('Error deleting order:', error);\n        }\n      }\n    },\n    openAddModal() {\n      this.showAddModal = true;\n    },\n    closeAddModal() {\n      this.showAddModal = false;\n      this.newOrder = {\n        orderID: '',\n        orderDate: '',\n        orderStatus: '',\n        paymentMethod: '',\n        shippedOrCollected: false,\n        totalAmount: '',\n        cartID: '',\n        shippingID: ''\n      };\n    },\n    async submitAdd() {\n      try {\n        await createOrder(this.newOrder);\n        await this.fetchOrders();\n        this.closeAddModal();\n      } catch (error) {\n        console.error('Error adding order:', error);\n      }\n    },\n    openUpdateModal(order) {\n      this.selectedOrder = {\n        ...order\n      };\n      this.showUpdateModal = true;\n    },\n    closeUpdateModal() {\n      this.showUpdateModal = false;\n      this.selectedOrder = null;\n    },\n    // async submitUpdate() {\n    //   try {\n    //     await updateOrder(this.selectedOrder);\n    //     await this.fetchOrders();\n    //     this.closeUpdateModal();\n    //   } catch (error) {\n    //     console.error('Error updating order:', error);\n    //   }\n    // },\n    searchOrders() {\n      this.filteredOrders = this.orders.filter(order => {\n        return order.orderID.toString().includes(this.searchQuery) || order.orderStatus.toLowerCase().includes(this.searchQuery.toLowerCase());\n      });\n    },\n    filterOrders() {\n      if (this.filterKey) {\n        this.filteredOrders = this.orders.filter(order => {\n          return order[this.filterKey].toString().toLowerCase().includes(this.searchQuery.toLowerCase());\n        });\n      } else {\n        this.filteredOrders = this.orders;\n      }\n    }\n  }\n};","map":{"version":3,"names":["getOrders","deleteOrder","createOrder","data","orders","filteredOrders","selectedOrder","newOrder","orderID","orderDate","orderStatus","paymentMethod","shippedOrCollected","totalAmount","cart","cartId","itemsQuantity","totalPrice","customer","customerID","customerName","email","phone","shipping","shippingID","deliveryAddress","shippingFee","created","fetchOrders","methods","error","console","confirm","openAddModal","showAddModal","closeAddModal","cartID","submitAdd","openUpdateModal","order","showUpdateModal","closeUpdateModal","searchOrders","filter","toString","includes","searchQuery","toLowerCase","filterOrders","filterKey"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<!--src/views/adminviews/OrderManagement.vue-->\r\n\r\n<template>\r\n  <div class=\"management-section\">\r\n    <h3>Manage Orders</h3>\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th>Order ID</th>\r\n<!--        <th>Customer Name</th>-->\r\n<!--        <th>Shipping Address</th>-->\r\n        <th>Order Date</th>\r\n        <th>Status</th>\r\n        <th>Payment Method</th>\r\n        <th>Shipped/Collected</th>\r\n        <th>Total Amount</th>\r\n        <th>CartID</th>\r\n        <th>ShippingID</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n     <tr v-for=\"order in filteredOrders\" :key=\"order.orderID\">\r\n  <td>{{ order.orderID }}</td>\r\n  <td>{{ order.orderDate }}</td>\r\n  <td>{{ order.orderStatus?.orderStatus }}</td>\r\n  <td>{{ order.paymentMethod?.paymentMethod }}</td>\r\n  <td>{{ order.shippedOrCollected ? 'Yes' : 'No' }}</td>\r\n  <td>{{ order.totalAmount }}</td>\r\n  <td>{{ order.cart?.cartId }}</td>\r\n  <td>{{ order.shipping?.shippingID }}</td>\r\n  <td><button @click=\"deleteOrder(order.orderID)\">Delete</button></td>\r\n</tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getOrders, deleteOrder, createOrder } from '@/services/orderService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      filteredOrders: [],\r\n      selectedOrder: null,\r\n      newOrder: {\r\n        orderID: '',\r\n        orderDate: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        shippedOrCollected: false,\r\n        totalAmount: '',\r\n        cart: {\r\n          cartId: '',\r\n          itemsQuantity: '',\r\n          totalPrice:'',\r\n          customer: {\r\n            customerID: '',\r\n            customerName: '',\r\n            email: '',\r\n            phone: ''\r\n          }\r\n\r\n        },\r\n        shipping: {\r\n          shippingID: '',\r\n          deliveryAddress: '',\r\n          orderStatus: '',\r\n          shippingFee:''\r\n        }\r\n      },\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchOrders();\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        this.orders = await getOrders();\r\n        this.filteredOrders = this.orders;\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n      }\r\n    },\r\n    async deleteOrder(orderID) {\r\n      if (confirm('Are you sure you want to delete this order?')) {\r\n        try {\r\n          await deleteOrder(orderID);\r\n          await this.fetchOrders();\r\n        } catch (error) {\r\n          console.error('Error deleting order:', error);\r\n        }\r\n      }\r\n    },\r\n    openAddModal() {\r\n      this.showAddModal = true;\r\n    },\r\n    closeAddModal() {\r\n      this.showAddModal = false;\r\n      this.newOrder = {\r\n        orderID: '',\r\n        orderDate: '',\r\n        orderStatus: '',\r\n        paymentMethod: '',\r\n        shippedOrCollected: false,\r\n        totalAmount: '',\r\n        cartID: '',\r\n        shippingID: ''\r\n      };\r\n    },\r\n    async submitAdd() {\r\n      try {\r\n        await createOrder(this.newOrder);\r\n        await this.fetchOrders();\r\n        this.closeAddModal();\r\n      } catch (error) {\r\n        console.error('Error adding order:', error);\r\n      }\r\n    },\r\n    openUpdateModal(order) {\r\n      this.selectedOrder = { ...order };\r\n      this.showUpdateModal = true;\r\n    },\r\n    closeUpdateModal() {\r\n      this.showUpdateModal = false;\r\n      this.selectedOrder = null;\r\n    },\r\n    // async submitUpdate() {\r\n    //   try {\r\n    //     await updateOrder(this.selectedOrder);\r\n    //     await this.fetchOrders();\r\n    //     this.closeUpdateModal();\r\n    //   } catch (error) {\r\n    //     console.error('Error updating order:', error);\r\n    //   }\r\n    // },\r\n    searchOrders() {\r\n      this.filteredOrders = this.orders.filter(order => {\r\n        return order.orderID.toString().includes(this.searchQuery) ||\r\n               order.orderStatus.toLowerCase().includes(this.searchQuery.toLowerCase());\r\n      });\r\n    },\r\n    filterOrders() {\r\n      if (this.filterKey) {\r\n        this.filteredOrders = this.orders.filter(order => {\r\n          return order[this.filterKey].toString().toLowerCase().includes(this.searchQuery.toLowerCase());\r\n        });\r\n      } else {\r\n        this.filteredOrders = this.orders;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.management-section {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  border-radius: 8px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980b9;\r\n}\r\n</style>\r\n\r\n<!--<template>-->\r\n<!--  <div>-->\r\n<!--    <h1>Order Management</h1>-->\r\n<!--    &lt;!&ndash; Order Table &ndash;&gt;-->\r\n<!--    <table class=\"table\">-->\r\n<!--      <thead>-->\r\n<!--      <tr>-->\r\n<!--        <th>Order ID</th>-->\r\n<!--        <th>Customer Name</th>-->\r\n<!--        <th>Order Date</th>-->\r\n<!--        <th>Total Amount</th>-->\r\n<!--        <th>Status</th>-->\r\n<!--        <th>Actions</th>-->\r\n<!--      </tr>-->\r\n<!--      </thead>-->\r\n<!--      <tbody>-->\r\n<!--      <tr v-for=\"order in orders\" :key=\"order.orderID\">-->\r\n<!--        <td>{{ order.orderID }}</td>-->\r\n<!--        <td>{{ order.customerName }}</td>-->\r\n<!--        <td>{{ order.orderDate }}</td>-->\r\n<!--        <td>{{ order.totalAmount }}</td>-->\r\n<!--        <td>{{ order.status }}</td>-->\r\n<!--        <td>-->\r\n<!--          <button @click=\"editOrder(order.orderID)\">Edit</button>-->\r\n<!--          <button @click=\"deleteOrder(order.orderID)\">Delete</button>-->\r\n<!--        </td>-->\r\n<!--      </tr>-->\r\n<!--      </tbody>-->\r\n<!--    </table>-->\r\n\r\n<!--    &lt;!&ndash; Form for Creating/Updating Orders &ndash;&gt;-->\r\n<!--    <div>-->\r\n<!--      <h2>{{ isEditMode ? 'Edit Order' : 'Create Order' }}</h2>-->\r\n<!--      <form @submit.prevent=\"submitOrder\">-->\r\n<!--        &lt;!&ndash; Form fields for order properties &ndash;&gt;-->\r\n<!--        <input v-model=\"form.customerName\" placeholder=\"Customer Name\" />-->\r\n<!--        <input v-model=\"form.totalAmount\" placeholder=\"Total Amount\" />-->\r\n<!--        <select v-model=\"form.status\">-->\r\n<!--          <option>Pending</option>-->\r\n<!--          <option>Shipped</option>-->\r\n<!--          <option>Delivered</option>-->\r\n<!--        </select>-->\r\n<!--        <button type=\"submit\">{{ isEditMode ? 'Update' : 'Create' }}</button>-->\r\n<!--      </form>-->\r\n<!--    </div>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import axios from 'axios';-->\r\n\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      orders: [],       // Holds the list of all orders-->\r\n<!--      form: {-->\r\n<!--        orderID: null,-->\r\n<!--        customerName: '',-->\r\n<!--        totalAmount: '',-->\r\n<!--        status: 'Pending'-->\r\n<!--      },-->\r\n<!--      isEditMode: false, // Track whether we are editing or creating-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    // Fetch all orders from the backend-->\r\n<!--    async fetchOrders() {-->\r\n<!--      try {-->\r\n<!--        const response = await axios.get('http://localhost:5119/order/getAll');-->\r\n<!--        this.orders = response.data;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error fetching orders:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Submit a new order or update an existing one-->\r\n<!--    async submitOrder() {-->\r\n<!--      try {-->\r\n<!--        if (this.isEditMode) {-->\r\n<!--          await axios.post('http://localhost:5119/order/update', this.form);-->\r\n<!--        } else {-->\r\n<!--          await axios.post('http://localhost:5119/order/create', this.form);-->\r\n<!--        }-->\r\n<!--        this.fetchOrders();  // Refresh the orders list-->\r\n<!--        this.resetForm();    // Reset the form-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error submitting order:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Edit an existing order-->\r\n<!--    async editOrder(orderID) {-->\r\n<!--      try {-->\r\n<!--        const response = await axios.get(`http://localhost:5119/order/read/${orderID}`);-->\r\n<!--        this.form = { ...response.data }; // Populate the form with existing data-->\r\n<!--        this.isEditMode = true;-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error reading order:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Delete an order-->\r\n<!--    async deleteOrder(orderID) {-->\r\n<!--      try {-->\r\n<!--        await axios.delete(`http://localhost:5119/order/delete/${orderID}`);-->\r\n<!--        this.fetchOrders();  // Refresh the orders list after deletion-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"Error deleting order:\", error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // Reset form after submission or canceling-->\r\n<!--    resetForm() {-->\r\n<!--      this.form = {-->\r\n<!--        orderID: null,-->\r\n<!--        customerName: '',-->\r\n<!--        totalAmount: '',-->\r\n<!--        status: 'Pending',-->\r\n<!--      };-->\r\n<!--      this.isEditMode = false;-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  mounted() {-->\r\n<!--    // Fetch orders when the component is mounted-->\r\n<!--    this.fetchOrders();-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--/* Add styling for table and form here */-->\r\n<!--.table {-->\r\n<!--  width: 100%;-->\r\n<!--  border-collapse: collapse;-->\r\n<!--}-->\r\n<!--.table th, .table td {-->\r\n<!--  border: 1px solid #ddd;-->\r\n<!--  padding: 8px;-->\r\n<!--}-->\r\n<!--.table th {-->\r\n<!--  background-color: #f4f4f4;-->\r\n<!--}-->\r\n<!--</style>-->\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}