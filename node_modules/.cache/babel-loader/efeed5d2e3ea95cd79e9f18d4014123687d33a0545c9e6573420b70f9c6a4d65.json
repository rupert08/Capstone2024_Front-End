{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UpdateOrderModal = _resolveComponent(\"UpdateOrderModal\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Update Order Modal \"), _createVNode(_component_UpdateOrderModal, {\n    isVisible: _ctx.isUpdateModalVisible,\n    order: $data.selectedOrder,\n    onClose: _ctx.closeUpdateModal,\n    onUpdateOrder: $options.handleUpdateOrder\n  }, null, 8 /* PROPS */, [\"isVisible\", \"order\", \"onClose\", \"onUpdateOrder\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createCommentVNode","_createVNode","_component_UpdateOrderModal","isVisible","_ctx","isUpdateModalVisible","order","$data","selectedOrder","onClose","closeUpdateModal","onUpdateOrder","$options","handleUpdateOrder"],"sources":["C:\\Users\\Rupert\\Desktop\\Capstone2024_Front-End\\src\\views\\adminviews\\OrderManagement.vue"],"sourcesContent":["<template>\r\n  <!-- Update Order Modal -->\r\n  <UpdateOrderModal\r\n      :isVisible=\"isUpdateModalVisible\"\r\n      :order=\"selectedOrder\"\r\n      @close=\"closeUpdateModal\"\r\n      @update-order=\"handleUpdateOrder\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport { updateOrder } from '@/services/orderService';\r\nimport UpdateOrderModal from '@/modals/UpdateOrderModal.vue';\r\n\r\nexport default {\r\n  components: {\r\n    UpdateOrderModal\r\n  },\r\n  data() {\r\n    return {\r\n      // ...other data\r\n      selectedOrder: null,\r\n    };\r\n  },\r\n  methods: {\r\n    openUpdateModal(order) {\r\n      this.selectedOrder = { ...order }; // Ensure a deep copy\r\n      this.isUpdateModalVisible = true;\r\n    },\r\n    async handleUpdateOrder(updatedOrder) {\r\n      try {\r\n        await updateOrder(updatedOrder.orderID, updatedOrder);\r\n        this.fetchOrders();\r\n        this.closeUpdateModal();\r\n      } catch (error) {\r\n        console.error('Error updating order:', error);\r\n      }\r\n    },\r\n    // Other methods like closeUpdateModal\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.modal {\r\n  display: block;\r\n  position: fixed;\r\n  z-index: 1000;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n}\r\n\r\n.modal-content {\r\n  position: relative;\r\n  margin: 10% auto;\r\n  padding: 20px;\r\n  width: 50%;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n}\r\n\r\n.close {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":";;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,mBAAA,wBAA2B,EAC3BC,YAAA,CAKEC,2BAAA;IAJGC,SAAS,EAAEC,IAAA,CAAAC,oBAAoB;IAC/BC,KAAK,EAAEC,KAAA,CAAAC,aAAa;IACpBC,OAAK,EAAEL,IAAA,CAAAM,gBAAgB;IACvBC,aAAY,EAAEC,QAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}